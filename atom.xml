<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ITSky</title>
  <subtitle>专注于Linux、Hadoop、Hive、Spark、Kaffka、Redis、MongoDB、ElasticSearch等技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itsky88.com/"/>
  <updated>2016-12-24T01:22:36.000Z</updated>
  <id>http://itsky88.com/</id>
  
  <author>
    <name>JerryLiu</name>
    <email>1031757312@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>method execute has incompatible type</title>
    <link href="http://itsky88.com/2016/12/24/scala/method%20execute%20has%20incompatible%20type/"/>
    <id>http://itsky88.com/2016/12/24/scala/method execute has incompatible type/</id>
    <published>2016-12-24T01:22:36.000Z</published>
    <updated>2016-12-24T01:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scala泛型的一个异常"><a href="#Scala泛型的一个异常" class="headerlink" title="Scala泛型的一个异常"></a>Scala泛型的一个异常</h3><p>异常代码:</p>
<pre><code class="java">def set(key: Array[Byte], value: Array[Byte]) = {
    new JedisClusterCommand(connectionHandler, maxRedirections) {
      override def execute(connection: Jedis): String = connection.set(key, value)
    }.run(new String(key, &quot;utf-8&quot;))
}
</code></pre>
<p>结果在编译的时候出现了如下异常:</p>
<pre><code class="java">Error:(26, 20) overriding method execute in class JedisClusterCommand of type (x$1: redis.clients.jedis.Jedis)Nothing;
 method execute has incompatible type
      override def execute(connection: Jedis): String = connection.set(key, value)
                   ^
</code></pre>
<p>到JedisClusterCommand类的源码中发现该类是一个泛型, 而我创建对象的时候没有使用泛型, 编译的时候不认识execute方法的返回值类型(Nothing与String产生了矛盾), 类源码如下:</p>
<pre><code class="java">public abstract class JedisClusterCommand&lt;T&gt; {
    private JedisClusterConnectionHandler connectionHandler;
    private int redirections;
    private ThreadLocal&lt;Jedis&gt; askConnection = new ThreadLocal();
    private StringBuilder hostTrace;

    public JedisClusterCommand(JedisClusterConnectionHandler connectionHandler, int maxRedirections) {
        this.connectionHandler = connectionHandler;
        this.redirections = maxRedirections;
    }

    public abstract T execute(Jedis var1);

    public T run(String key) {
        if(key == null) {
            throw new JedisClusterException(&quot;No way to dispatch this command to Redis Cluster.&quot;);
        } else {
            this.hostTrace = new StringBuilder();
            return this.runWithRetries(key, this.redirections, false, false);
        }
    }
}
</code></pre>
<p>解决方法: 创建JedisClusterCommand对象时增加一个泛型即可。<br>修改后的代码如下:</p>
<pre><code class="java">def set(key: Array[Byte], value: Array[Byte]) = {
    new JedisClusterCommand[String](connectionHandler, maxRedirections) {
      override def execute(connection: Jedis): String = connection.set(key, value)
    }.run(new String(key, &quot;utf-8&quot;))
}
</code></pre>
<p>再次编译则通过了!!!!!!!<br>参考: <a href="http://stackoverflow.com/questions/17089760/scala-implementing-java-interface-results-in-incompatible-type" target="_blank" rel="external">http://stackoverflow.com/questions/17089760/scala-implementing-java-interface-results-in-incompatible-type</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Scala泛型的一个异常&quot;&gt;&lt;a href=&quot;#Scala泛型的一个异常&quot; class=&quot;headerlink&quot; title=&quot;Scala泛型的一个异常&quot;&gt;&lt;/a&gt;Scala泛型的一个异常&lt;/h3&gt;&lt;p&gt;异常代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ja
    
    </summary>
    
      <category term="Scala" scheme="http://itsky88.com/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://itsky88.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>scala中Either,Option,Try的使用</title>
    <link href="http://itsky88.com/2016/12/23/scala/scala%E4%B8%ADEither,Option,Try%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://itsky88.com/2016/12/23/scala/scala中Either,Option,Try的使用/</id>
    <published>2016-12-22T16:00:00.000Z</published>
    <updated>2016-12-24T02:06:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scala中Either-Option-Try的使用"><a href="#scala中Either-Option-Try的使用" class="headerlink" title="scala中Either,Option,Try的使用"></a>scala中Either,Option,Try的使用</h2><p>scala是一种函数式的编程语言, 在进行数据交互时，以一种优雅的方式处理各种异常，于是就出现了Either, Option, Try这三个容器。这样编写出来的代码健壮性极强。<br>这三个类的作用各有不同：<br>1, Either解决的是两个值的类型不确定的问题;<br>2, Option解决的是null的问题;<br>3, Try解决的是捕获运行过程中可能出现的异常;</p>
<p>下面就来细细说来, 哈哈。。。</p>
<h3 id="Either"><a href="#Either" class="headerlink" title="Either"></a>Either</h3><p>Either包含了两个子类Left, Right, 并且Either也提供了类似集合的功能, 测试代码如下:</p>
<pre><code class="java">package com.scala.test.collect

import scala.util.{Failure, Success, Try}

/**
  * Created by jerry on 16-12-23.
  * scala Either测试
  */
object EitherTest extends App {
  def getEither(str: String): Either[Set[Int], List[String]] = {
    if(str == &quot;left&quot;) {
      Left(Set(1, 2, 3))
    } else {
      Right(List(&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;, &quot;zhaoliu&quot;))
    }
  }
  def eitherTest = {
    val res = getEither(&quot;left&quot;)
    println(res.isLeft)   // 判断第一个值是否为空
    println(res.isRight)  // 判断第二个值是否为空
    res.left.get.map(println _) // .left获取Left对象,
    res.left.map(println _)
    println(res.right.getOrElse(&quot;no right...&quot;))
  }
  eitherTest
}
</code></pre>
<p>输出结果:</p>
<pre><code class="java">true
false
1
2
3
Set(1, 2, 3)
no right...
</code></pre>
<h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><p>Option包含了两个子类None(表示空值), Some(表示非空值), 并且Option也提供了类似集合的功能, 测试代码如下:</p>
<pre><code class="java">package com.scala.test.collect

import scala.util.{Failure, Success, Try}

/**
  * Created by jerry on 16-12-23.
  * scala Option测试
  */
object EitherTest extends App {
  def getOpt(str: String): Option[String] = {
    if(str == null || str == &quot;&quot;) None else Some(&quot;hello Option....&quot;)
  }
  def optionTest = {
    val res1 = getOpt(&quot;1&quot;)
    println(res1.isEmpty)
    println(res1.isDefined)
    if(res1.isDefined) println(res1.get)

    // 高级用法
    val res2 = getOpt(&quot;&quot;)
    println(res2.getOrElse(&quot;is empty&quot;))
  }
  optionTest
}
</code></pre>
<p>输出结果:</p>
<pre><code class="java">false
true
hello Option....
is empty
</code></pre>
<h3 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h3><p>Try包含了两个子类Failure(表示出现异常), Success(表示执行成功), 并且Try也提供了类似集合的功能, 测试代码如下:</p>
<pre><code class="java">package com.scala.test.collect

import scala.util.{Failure, Success, Try}

/**
  * Created by jerry on 16-12-23.
  * scala Try测试
  */
object EitherTest extends App {
  def divide(a: Int, b: Int): Try[Int] = Try(a / b)
  def getTryValue(t: Try[Int]) = {
    t match {
      case Success(s) =&gt; println(s&quot;success value is : $s&quot;)
      case Failure(f) =&gt; println(s&quot;error value is : $f&quot;)
    }
  }
  def tryTest = {
    val res1 = divide(1, 0)
    getTryValue(res1)
    // 高级用法
    println(res1.getOrElse(5))

    val res2 = divide(1, 2)
    getTryValue(res2)
  }
  tryTest
}
</code></pre>
<p>输出结果:</p>
<pre><code class="java">error value is : java.lang.ArithmeticException: / by zero
5
success value is : 0
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;scala中Either-Option-Try的使用&quot;&gt;&lt;a href=&quot;#scala中Either-Option-Try的使用&quot; class=&quot;headerlink&quot; title=&quot;scala中Either,Option,Try的使用&quot;&gt;&lt;/a&gt;scala中Ei
    
    </summary>
    
      <category term="Scala" scheme="http://itsky88.com/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://itsky88.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>redis集群模式下进行二进制数据存储</title>
    <link href="http://itsky88.com/2016/12/22/redis/redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%BF%9B%E8%A1%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>http://itsky88.com/2016/12/22/redis/redis集群模式下进行二进制数据存储/</id>
    <published>2016-12-21T16:00:00.000Z</published>
    <updated>2016-12-24T01:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>在集群模式下, 官方文档提供的JedisCluster没有提供redis二进制数据操作的api, 经过查看源码发现JedisCluster底层也是使用的Jedis对象操作的redis, 所以理论上来说JedisCluster不应该不能进行二进制数据存储操作, 所以就来了这篇文章。</p>
<h3 id="JedisCluster部分源码"><a href="#JedisCluster部分源码" class="headerlink" title="JedisCluster部分源码:"></a>JedisCluster部分源码:</h3><pre><code class="java">public String set(final String key, final String value) {
    return (String)(new JedisClusterCommand(this.connectionHandler, this.maxRedirections) {
        public String execute(Jedis connection) {
            return connection.set(key, value);
        }
    }).run(key);
}
</code></pre>
<p>相信你应该看出来了吧。</p>
<h3 id="自己的扩展源码如下"><a href="#自己的扩展源码如下" class="headerlink" title="自己的扩展源码如下:"></a>自己的扩展源码如下:</h3><pre><code class="java">package com.raysdata.model

import java.util.Set

import com.raysdata.common.Configuration
import org.apache.commons.pool2.impl.GenericObjectPoolConfig
import redis.clients.jedis._

/**
  * Created by jerry on 16-12-21.
  * 扩展的JedisCluster客户端
  * 目的：在redis集群中存储二进制数据
  */
class MyJedisCluster(jedisClusterNode: Set[HostAndPort], timeout: Int, maxRedirections: Int, poolConfig: GenericObjectPoolConfig)
  extends JedisCluster(jedisClusterNode: Set[HostAndPort], timeout: Int, maxRedirections: Int, poolConfig: GenericObjectPoolConfig) {
  private val poolConfig1: GenericObjectPoolConfig = null
  val connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig, timeout);

  def this (nodes: Set[HostAndPort], timeout: Int, poolConfig: GenericObjectPoolConfig)= this(nodes, timeout, 5, poolConfig)
  def this (nodes: Set[HostAndPort], poolConfig: GenericObjectPoolConfig)= this(nodes, 20000, 5, poolConfig)

  def set(key: Array[Byte], value: Array[Byte]) = {
    new JedisClusterCommand[String](connectionHandler, maxRedirections) {
      override def execute(connection: Jedis): String = connection.set(key, value)
    }.run(new String(key, &quot;utf-8&quot;)) // 如果不是用String类型的key则需要重写JedisClusterCommand的run方法
  }
}

import scala.collection.JavaConverters._
object MyJedisCluster extends App with Configuration {
  /** jedis配置 */
  private[this] val jedisPoolConfig = new JedisPoolConfig
  jedisPoolConfig.setMaxTotal(REDIS_MAX_ACTIVE)
  jedisPoolConfig.setMaxIdle(REDIS_MAX_IDLE)
  jedisPoolConfig.setMaxWaitMillis(REDIS_MAX_WAIT_TIME)
  private[this] lazy val hostAndPortSet = REDIS_HOST.split(&quot;,&quot;, -1).map(x =&gt; new HostAndPort(x, REDIS_PORT)).toSet.asJava
  val myCluster = new MyJedisCluster(hostAndPortSet, jedisPoolConfig)
  val key = &quot;test_byte_key&quot;
  val value = &quot;test_byte_value&quot;
  myCluster.set(key.getBytes, value.getBytes)
}
</code></pre>
<h3 id="JedisClusterCommand的run方法如下"><a href="#JedisClusterCommand的run方法如下" class="headerlink" title="JedisClusterCommand的run方法如下:"></a>JedisClusterCommand的run方法如下:</h3><pre><code class="java">public T run(String key) {
    if(key == null) {
        throw new JedisClusterException(&quot;No way to dispatch this command to Redis Cluster.&quot;);
    } else {
        this.hostTrace = new StringBuilder();
        return this.runWithRetries(key, this.redirections, false, false);
    }
}
</code></pre>
<p>该代码都是自己亲测可以的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述:&quot;&gt;&lt;/a&gt;概述:&lt;/h3&gt;&lt;p&gt;在集群模式下, 官方文档提供的JedisCluster没有提供redis二进制数据操作的api, 经过查看源码发现JedisCluste
    
    </summary>
    
      <category term="Redis" scheme="http://itsky88.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://itsky88.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>sparksql或hive中创建hbase表</title>
    <link href="http://itsky88.com/2016/12/22/hbase/sparksql%E6%88%96hive%E4%B8%AD%E5%88%9B%E5%BB%BAhbase%E8%A1%A8/"/>
    <id>http://itsky88.com/2016/12/22/hbase/sparksql或hive中创建hbase表/</id>
    <published>2016-12-21T16:00:00.000Z</published>
    <updated>2016-12-24T01:22:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>建表语句如下:</p>
<pre><code class="sql">create table c1
(
key1 string,
c11 int,
c12 string,
c13 string,
c14 string
)
stored by &#39;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#39;
with serdeproperties(
&quot;hbase.columns.mapping&quot; = &quot;:key,
info:c11,
info:c12,
info:c13,
info:c14
&quot;)
tblproperties(&quot;hbase.table.name&quot; = &quot;rays:chb&quot;);

然后在hbase中添加数据:
put &#39;rays:chb&#39;,&quot;k1&quot;,&#39;info:c11&#39;,100
put &#39;rays:chb&#39;,&quot;k1&quot;,&#39;info:c11&#39;,100
put &#39;rays:chb&#39;,&quot;k1&quot;,&#39;info:c12&#39;,200
put &#39;rays:chb&#39;,&quot;k1&quot;,&#39;info:c13&#39;,200
put &#39;rays:chb&#39;,&quot;k1&quot;,&#39;info:c14&#39;,200
put &#39;rays:chb&#39;,&quot;k2&quot;,&#39;info:c11&#39;,300
put &#39;rays:chb&#39;,&quot;k2&quot;,&#39;info:c12&#39;,400
put &#39;rays:chb&#39;,&quot;k2&quot;,&#39;info:c13&#39;,200
put &#39;rays:chb&#39;,&quot;k2&quot;,&#39;info:c14&#39;,200
put &#39;rays:chb&#39;,&quot;k3&quot;,&#39;info:c11&#39;,500
put &#39;rays:chb&#39;,&quot;k3&quot;,&#39;info:c12&#39;,600
put &#39;rays:chb&#39;,&quot;k3&quot;,&#39;info:c13&#39;,200
put &#39;rays:chb&#39;,&quot;k3&quot;,&#39;info:c14&#39;,200;
</code></pre>
<p>sparksql和hive为hbase提供了方便的sql查询工具,在进行大数据分析时及其方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建表语句如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;create table c1
(
key1 string,
c11 int,
c12 string,
c13 string,
c14 string
)
stored by &amp;#39;org.apache
    
    </summary>
    
      <category term="Hbase" scheme="http://itsky88.com/categories/Hbase/"/>
    
    
      <category term="Hbase" scheme="http://itsky88.com/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>Netty教程(一)之HelloWorld</title>
    <link href="http://itsky88.com/2016/12/21/netty/Netty%E6%95%99%E7%A8%8B(%E4%B8%80)%E4%B9%8BHelloWorld/"/>
    <id>http://itsky88.com/2016/12/21/netty/Netty教程(一)之HelloWorld/</id>
    <published>2016-12-21T11:31:26.000Z</published>
    <updated>2016-12-21T11:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>程序员最直接的学习方式是代码, 任何程序的基础就是HelloWorld, 例子如下：</p>
<h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><pre><code class="java">package com.netty.test.server

import java.net.InetSocketAddress
import java.util.concurrent.Executors

import org.jboss.netty.bootstrap.ServerBootstrap
import org.jboss.netty.channel._
import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory

/**
  * Created by jerry on 16-12-21.
  * Netty服务端程序
  */
object HelloWorldServer extends App {
  // 服务端启动程序(入口)
  val serverBootstrap = new ServerBootstrap(
    new NioServerSocketChannelFactory( // 创建服务端连接的工厂
      Executors.newCachedThreadPool(), Executors.newCachedThreadPool()))
  /** 设置服务端业务处理逻辑(客户端和服务端的通用代码部分, 只是对应不同的Handler) */
  serverBootstrap.setPipelineFactory(new ChannelPipelineFactory {
    override def getPipeline: ChannelPipeline = Channels.pipeline(new ServerHandler())
  })
  /** 绑定服务端端口号 */
  serverBootstrap.bindAsync(new InetSocketAddress(8888))
}

/**
  * 服务端连接成功后的处理
  */
class ServerHandler() extends SimpleChannelHandler {
  override def channelConnected(ctx: ChannelHandlerContext, e: ChannelStateEvent) = {
    println(&quot;hello world, server........&quot;)
  }
}
</code></pre>
<h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><pre><code class="java">package com.netty.test.client

import java.net.InetSocketAddress
import java.util.concurrent.Executors

import org.jboss.netty.bootstrap.ClientBootstrap
import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory
import org.jboss.netty.channel._

/**
  * Created by jerry on 16-12-21.
  * Netty 客户端程序
  */
object HelloWorldClient extends App {
  /** 客户端启动程序 */
  val clientBootstrap = new ClientBootstrap(
    /** 客户端连接的创建工厂 */
    new NioClientSocketChannelFactory(
      Executors.newCachedThreadPool(), Executors.newCachedThreadPool()))
  /** 设置客户端业务处理逻辑(客户端和服务端的通用代码部分, 只是对应不同的Handler) */
  clientBootstrap.setPipelineFactory(new ChannelPipelineFactory {
    override def getPipeline: ChannelPipeline = Channels.pipeline(new ClientHandler())
  })
  /** 连接服务器 */
  clientBootstrap.connect(new InetSocketAddress(&quot;localhost&quot;, 8888))
}

/**
  * 客户端连接成功后的处理逻辑
  */
class ClientHandler extends SimpleChannelHandler {
  override def channelConnected(ctx: ChannelHandlerContext, e: ChannelStateEvent) = {
    println(&quot;hello world, client.......&quot;)
  }
}
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;程序员最直接的学习方式是代码, 任何程序的基础就是HelloWorld, 例子如下：&lt;/p&gt;
&lt;h3 id=&quot;服务端代码&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Netty" scheme="http://itsky88.com/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://itsky88.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty教程(二)之传递字符串消息</title>
    <link href="http://itsky88.com/2016/12/21/netty/Netty%E6%95%99%E7%A8%8B(%E4%BA%8C)%E4%B9%8B%E4%BC%A0%E9%80%92%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B6%88%E6%81%AF/"/>
    <id>http://itsky88.com/2016/12/21/netty/Netty教程(二)之传递字符串消息/</id>
    <published>2016-12-21T11:31:26.000Z</published>
    <updated>2016-12-21T11:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><pre><code class="java">package com.netty.test.server

import java.net.InetSocketAddress
import java.nio.charset.Charset
import java.util.concurrent.Executors

import org.jboss.netty.bootstrap.ServerBootstrap
import org.jboss.netty.buffer.ChannelBuffer
import org.jboss.netty.channel._
import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory

/**
  * Created by jerry on 16-12-21.
  * 字符串消息服务端程序
  */
object StrMessageServer extends App {
  val serverBootstrap = new ServerBootstrap(
    new NioServerSocketChannelFactory(
      Executors.newCachedThreadPool(), Executors.newCachedThreadPool()))
  serverBootstrap.setPipelineFactory(new ChannelPipelineFactory {
    override def getPipeline: ChannelPipeline = Channels.pipeline(new StrMessageServerHandler())
  })
  serverBootstrap.bind(new InetSocketAddress(8888))
  // 异步绑定
  //  serverBootstrap.bindAsync(new InetSocketAddress(8888))
}

/**
  * 客户端发送字符串
  */
class StrMessageServerHandler extends SimpleChannelHandler {
  override def messageReceived(ctx: ChannelHandlerContext, e: MessageEvent) = {
    println(&quot;server receive msg success .......&quot;)
    val buff = e.getMessage.asInstanceOf[ChannelBuffer]
    println(buff.toString(Charset.defaultCharset()))
    println(&quot;receive end ........&quot;)
  }
}
</code></pre>
<h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><pre><code class="java">package com.netty.test.client

import java.net.InetSocketAddress
import java.util.concurrent.Executors

import org.jboss.netty.bootstrap.ClientBootstrap
import org.jboss.netty.buffer.ChannelBuffers
import org.jboss.netty.channel._
import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory

/**
  * Created by jerry on 16-12-21.
  * 字符串消息客户端程序
  */
object StrMessageClient extends App {
  val clientBootstrap = new ClientBootstrap(
    new NioClientSocketChannelFactory(
      Executors.newCachedThreadPool(), Executors.newCachedThreadPool()))
  clientBootstrap.setPipelineFactory(new ChannelPipelineFactory {
    override def getPipeline: ChannelPipeline = Channels.pipeline(new StrMessageClientHandler())
  })
  clientBootstrap.connect(new InetSocketAddress(&quot;localhost&quot;, 8888))
}

/**
  * 字符串
  */
class StrMessageClientHandler() extends SimpleChannelHandler {
  override def channelConnected(ctx: ChannelHandlerContext, e: ChannelStateEvent) = {
    println(&quot;connected success .....&quot;)
    val msg = &quot;hello server&quot;
    val buff = ChannelBuffers.buffer(msg.length) // netty中默认采用ChannelBuffer进行数据传输
    buff.writeBytes(msg.getBytes())
    e.getChannel.write(buff)
    println(&quot;send string msg to server success .......&quot;)
  }
}
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务端代码&quot;&gt;&lt;a href=&quot;#服务端代码&quot; class=&quot;headerlink&quot; title=&quot;服务端代码&quot;&gt;&lt;/a&gt;服务端代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package com.netty.test.server

import
    
    </summary>
    
      <category term="Netty" scheme="http://itsky88.com/categories/Netty/"/>
    
    
      <category term="Netty" scheme="http://itsky88.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>hightcharts柱状图click事件深入研究</title>
    <link href="http://itsky88.com/2016/12/18/csdn/hightcharts%E6%9F%B1%E7%8A%B6%E5%9B%BEclick%E4%BA%8B%E4%BB%B6%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/"/>
    <id>http://itsky88.com/2016/12/18/csdn/hightcharts柱状图click事件深入研究/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>柱状图的json数据：<br>data = {categories:[“小学一年级1班”,”小学一年级2班”],<br>        series:[<br>                {name:”0-20”,data:[10,30],urls:[1,2]},<br>                {name:”20-40”,data:[20,31],urls:[3,4]},<br>                {name:”40-60”,data:[25,30],urls:[5,6]},<br>                {name:”60-80”,data:[40,35],urls:[7,8]},<br>                {name:”80-100”,data:[20,60],urls:[9,10]}<br>               ]};<br>其中0-20中，data[0]=10对应小学一年级1班，data[1]=30对应小学一年级2班，urls[0]对应用户点击小学一年级1班的柱状图时的url后面的同理。<br>事件处理函数的设置：<br>plotOptions: {<br>                column: {<br>                 cursor: ‘pointer’,<br>                 groupPadding:0.1,<br>                 pointPadding :0.1,<br>                 events:{click:function(e){<br>                         if(callbackClickEvent) {<br>                          callbackClickEvent(e);<br>                         }<br>                       }},<br>                       dataLabels: {<br>                           enabled: true<br>                       }<br>                   }<br>               },<br>               series: data<br>callbackClickEvent函数如下：<br>function callbackClickEvent(e) {<br>    var urls = e.point.series.userOptions.urls[e.point.x];// 我们可以使用这些属性来获得用户点击的柱子对应url的值<br>   }<br>效果图：<br><img src="http://img.blog.csdn.net/20131122144449937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1aHVpXzMwNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>关于event的其他属性：<br><img src="http://img.blog.csdn.net/20131122145139796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1aHVpXzMwNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20131122145156687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1aHVpXzMwNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20131122145207640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1aHVpXzMwNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;柱状图的json数据：&lt;br&gt;data = {categories:[“小学一年级1班”,”小学一年级2班”],&lt;br&gt;        series:[&lt;br&gt;                {name:”0-20”,data:[10,30],urls:[1,2]},&lt;br
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键的使用，很实用</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%BE%88%E5%AE%9E%E7%94%A8/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Eclipse快捷键的使用，很实用/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.open-open.com/bbs/view/1320934157953" target="_blank" rel="external">http://www.open-open.com/bbs/view/1320934157953</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.open-open.com/bbs/view/1320934157953&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.open-open.com/bbs/view/1320934157953&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FATAL Fatal error during KafkaServerStartable startup. java.lang.OutOfMemoryError Java heap space</title>
    <link href="http://itsky88.com/2016/12/18/csdn/FATAL%20Fatal%20error%20during%20KafkaServerStartable%20startup.%20java.lang.OutOfMemoryError%20Java%20heap%20space/"/>
    <id>http://itsky88.com/2016/12/18/csdn/FATAL Fatal error during KafkaServerStartable startup. java.lang.OutOfMemoryError Java heap space/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天搭建了kafka单机版用于测试，配置好以后启动kafka时出现了内存溢出的问题，如下： </p>
<pre><code class="java">[2016-10-22 10:39:39,112] INFO [Kafka Server 0], shut down completed (kafka.server.KafkaServer)
[2016-10-22 10:39:39,113] FATAL Fatal error during KafkaServerStartable startup. Prepare to shutdown (kafka.server.KafkaServerStartable)
java.lang.OutOfMemoryError: Java heap space
    at java.nio.HeapByteBuffer.&lt;init&gt;(HeapByteBuffer.java:57)
    at java.nio.ByteBuffer.allocate(ByteBuffer.java:335)
    at kafka.log.SkimpyOffsetMap.&lt;init&gt;(OffsetMap.scala:42)
    at kafka.log.LogCleaner$CleanerThread.&lt;init&gt;(LogCleaner.scala:177)
    at kafka.log.LogCleaner$$anonfun$1.apply(LogCleaner.scala:86)
    at kafka.log.LogCleaner$$anonfun$1.apply(LogCleaner.scala:86)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.immutable.Range.foreach(Range.scala:141)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
    at scala.collection.AbstractTraversable.map(Traversable.scala:105)
    at kafka.log.LogCleaner.&lt;init&gt;(LogCleaner.scala:86)
    at kafka.log.LogManager.&lt;init&gt;(LogManager.scala:64)
    at kafka.server.KafkaServer.createLogManager(KafkaServer.scala:335)
    at kafka.server.KafkaServer.startup(KafkaServer.scala:85)
    at kafka.server.KafkaServerStartable.startup(KafkaServerStartable.scala:29)
    at kafka.Kafka$.main(Kafka.scala:46)
    at kafka.Kafka.main(Kafka.scala)
[2016-10-22 10:39:39,114] INFO EventThread shut down (org.apache.zookeeper.ClientCnxn)
[2016-10-22 10:39:39,116] INFO [Kafka Server 0], shutting down (kafka.server.KafkaServer)
</code></pre>
<p>解决方法：<br>编辑 kafka/kafka-server-start.sh 这个启动文件，修改 KAFKA_HEAP_OPTS 这个参数，默认的参数是 export KAFKA_HEAP_OPTS=”-Xmx512m -Xms512m”，增大内存即可，export KAFKA_HEAP_OPTS=”-Xmx1g -Xms1g”，再次启动问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天搭建了kafka单机版用于测试，配置好以后启动kafka时出现了内存溢出的问题，如下： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;[2016-10-22 10:39:39,112] INFO [Kafka Server 0], shut down com
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Exception%20in%20thread%20main%20NoNodeAvailableException%5BNone%20of%20the%20configured%20nodes%20are%20available/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Exception in thread main NoNodeAvailableException[None of the configured nodes are available/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch2.3.4</p>
<pre><code class="java">Map&lt;String, String&gt; map = new HashMap();
Settings.Builder settings = Settings.builder().put(map);
Client client = TransportClient.builder().settings(settings).build()
                .addTransportAddress(new InetSocketTransportAddress(
                        InetAddress.getByName(&quot;localhost&quot;), Integer.parseInt(&quot;9200&quot;)));
IndexRequestBuilder indexRequestBuilder = client.prepareIndex(RULE_INDEX, RULE_INDEX_TYPE, id);
IndexResponse response = indexRequestBuilder.setSource(json).execute().actionGet();
client.close();
</code></pre>
<pre><code class="java">信息: [Yukio] failed to get node info for {#transport#-1}{127.0.0.1}{localhost/127.0.0.1:9200}, disconnecting...
ReceiveTimeoutTransportException[[][localhost/127.0.0.1:9200][cluster:monitor/nodes/liveness] request_id [0] timed out after [5001ms]]
    at org.elasticsearch.transport.TransportService$TimeoutHandler.run(TransportService.java:679)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)

Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: [{#transport#-1}{127.0.0.1}{localhost/127.0.0.1:9200}]]
    at org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)
    at org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)
    at org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)
    at org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)
    at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)
    at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)
    at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)
    at com.es.plugin.EsOperationServiceTest.main(EsOperationServiceTest.java:50)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
</code></pre>
<p>解决：如果你配置了es集群的cluster.name，则需要在settings中添加cluster.name的名字，如果没有修改端口号，则客户端的端口号为9300。</p>
<pre><code class="java">Map&lt;String, String&gt; map = new HashMap();
map.put(&quot;cluster.name&quot;, &quot;es_test&quot;);
Settings.Builder settings = Settings.builder().put(map);
Client client = TransportClient.builder().settings(settings).build()
                .addTransportAddress(new InetSocketTransportAddress(
                        InetAddress.getByName(&quot;localhost&quot;), Integer.parseInt(&quot;9300&quot;)));
</code></pre>
<p>再次运行问题解决。<br>参考：<a href="http://stackoverflow.com/questions/25912572/java-elasticsearch-none-of-the-configured-nodes-are-available" target="_blank" rel="external">http://stackoverflow.com/questions/25912572/java-elasticsearch-none-of-the-configured-nodes-are-available</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch2.3.4&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Map&amp;lt;String, String&amp;gt; map = new HashMap();
Settings.Builder settings = Settings.builde
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ERROR The node /hbase is not in ZooKeeper. It should have been written by the master. Check the val</title>
    <link href="http://itsky88.com/2016/12/18/csdn/ERROR%20The%20node%20hbase%20is%20not%20in%20ZooKeeper.%20It%20should%20have%20been%20written%20by%20the%20master.%20Check%20the%20val/"/>
    <id>http://itsky88.com/2016/12/18/csdn/ERROR The node hbase is not in ZooKeeper. It should have been written by the master. Check the val/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在安装hbase（1.2.3）单机版，安装完毕启动没有问题，但是在运行hbase shell执行命令的时候却抛出了异常，经过google后解决了问题，问题如下：<br>比如：执行  list 命令：</p>
<pre><code class="java">ERROR: The node /hbase is not in ZooKeeper. It should have been written by the master. Check the value configured in &#39;zookeeper.znode.parent&#39;. There could be a mismatch with the one configured in the master.
</code></pre>
<p>根据报错信息也能够发现是配置的问题。解决方法：<br>在hbase-site.xml文件中添加如下配置：</p>
<pre><code class="html">&lt;property&gt;
    &lt;name&gt;zookeeper.znode.parent&lt;/name&gt;
    &lt;value&gt;/hbase&lt;/value&gt;
&lt;/property&gt;
</code></pre>
<p>重新启动hbase，再次执行hbase shell命令，问题即解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在安装hbase（1.2.3）单机版，安装完毕启动没有问题，但是在运行hbase shell执行命令的时候却抛出了异常，经过google后解决了问题，问题如下：&lt;br&gt;比如：执行  list 命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ERROR: 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>专注大数据</title>
    <link href="http://itsky88.com/2016/12/18/csdn/%E4%B8%93%E6%B3%A8%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    <id>http://itsky88.com/2016/12/18/csdn/专注大数据/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://user.qzone.qq.com/377486624/blog/1382158555#!app=2&amp;via=QZ.HashRefresh&amp;pos=catalog_list" target="_blank" rel="external">http://user.qzone.qq.com/377486624/blog/1382158555#!app=2&amp;via=QZ.HashRefresh&amp;pos=catalog_list</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://user.qzone.qq.com/377486624/blog/1382158555#!app=2&amp;amp;via=QZ.HashRefresh&amp;amp;pos=catalog_list&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ImportError No module named apt_pkg</title>
    <link href="http://itsky88.com/2016/12/18/csdn/ImportError%20No%20module%20named%20apt_pkg/"/>
    <id>http://itsky88.com/2016/12/18/csdn/ImportError No module named apt_pkg/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="python">
</code></pre>
<pre><code class="python">Traceback (most recent call last):
  File &quot;/usr/bin/apt-listchanges&quot;, line 28, in &lt;module&gt;
    import apt_pkg
ImportError: No module named apt_pkg

sudo apt-get remove --purge python-apt
sudo apt-get install python-apt
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;Traceback (most recent call last):
  File &amp;quot;/usr/bin/apt-listchanges&amp;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HighCharts点击柱形或饼块加URL或Click事件</title>
    <link href="http://itsky88.com/2016/12/18/csdn/HighCharts%E7%82%B9%E5%87%BB%E6%9F%B1%E5%BD%A2%E6%88%96%E9%A5%BC%E5%9D%97%E5%8A%A0URL%E6%88%96Click%E4%BA%8B%E4%BB%B6/"/>
    <id>http://itsky88.com/2016/12/18/csdn/HighCharts点击柱形或饼块加URL或Click事件/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在做图表的时候，有时候需要在单个数据上加链接或点击事件，是在plotOptions里的events里设置的<br><code>01``plotOptions:
 {``02``    ``pie:
 {``03``        ``cursor: ``&#39;pointer&#39;``,``04``        ``events:
 {``05``            ``click: ``function``(e)
 {``06``        ``location.href
 = e.point.url;&lt;span&gt;&lt;/span&gt; ``//上面是当前页跳转，如果是要跳出新页面，那就用``07``                ``//window.open(e.point.url);``08``                ``//这里的url要后面的data里给出``09``        ``}``10``    ``},``11``    ``}``12``},``13``series:
 [{``14``    ``data:
 [``15``        ``{name:``&#39;地产组&#39;``,y:76,url:``&#39;http://www.baidu.com&#39;``},``16``   
     ``{name:``&#39;能源组&#39;``,y:54,url:``&#39;&lt;span&gt;&lt;/span&gt;http://www.google.com&lt;span&gt;&lt;/span&gt;&#39;``},&lt;span&gt;&lt;/span&gt;
             {``17``   
     ``{name:``&#39;互联网&#39;``,y:20,url:``&#39;http://www.sohu.com&#39;``}``18``}]</code>以上是针对饼图的，如果是柱形图那就把pie:{}换成column : {}当然如果换成series:{}那就不用管是饼图还是柱形图或是其他图形了</p>
<p><code>01``plotOptions:
 {``02``    ``series:
 {``03``        ``cursor: ``&#39;pointer&#39;``,``04``        ``events:
 {``05``            ``click: ``function``(e)
 {``06``        ``location.href
 = e.point.url;``07``                ``//上面是当前页跳转，如果是要跳出新页面，那就用``08``                ``//window.open(e.point.url);``09``                ``//这里的url要后面的data里给出``10``        ``}``11``    ``},``12``    ``}``13``},``14``series:
 [{``15``    ``data:
 [``16``        ``{name:``&#39;地产组&#39;``,y:76,url:``&#39;http://www.baidu.com&#39;``},``17``        ``{name:``&#39;能源组&#39;``,y:54,url:``&#39;http://www.google.com&#39;``},            
 {``18``        ``{name:``&#39;互联网&#39;``,y:20,url:``&#39;http://www.sohu.com&#39;``}``19``}]</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在做图表的时候，有时候需要在单个数据上加链接或点击事件，是在plotOptions里的events里设置的&lt;br&gt;&lt;code&gt;01``plotOptions:
 {``02``    ``pie:
 {``03``        ``cursor: ``&amp;#39;poi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 15 Released 破解 注册码</title>
    <link href="http://itsky88.com/2016/12/18/csdn/IntelliJ%20IDEA%2015%20Released%20%E7%A0%B4%E8%A7%A3%20%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://itsky88.com/2016/12/18/csdn/IntelliJ IDEA 15 Released 破解 注册码/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>拿来主义，试了，确实好用哈。。。<br>注册方法:   注册码可以沿用14的,只是在 注册时选择 License server ，填 <a href="http://idea.lanyus.com" target="_blank" rel="external">http://idea.lanyus.com</a> ，然后点击 OK</p>
<p><a href="https://www.jetbrains.com/idea/whatsnew/" target="_blank" rel="external">https://www.jetbrains.com/idea/whatsnew/</a><br><a href="http://blog.jetbrains.com/idea/2015/11/intellij-idea-15-released-adds-kotlin-to-the-family-of-supported-jvm-languages/" target="_blank" rel="external">http://blog.jetbrains.com/idea/2015/11/intellij-idea-15-released-adds-kotlin-to-the-family-of-supported-jvm-languages/</a></p>
<p>Debug </p>
<ol>
<li>支持 Lambda 表达式 Debug ，之前版本只能使用推倒 </li>
<li>Debug 时可强制方法 /表达式返回值</li>
</ol>
<p>用户界面 </p>
<ol>
<li>测试 UI 提升，增加大量统计功能 </li>
<li>“Find in Path”功能增加行内代码搜索 </li>
<li>Run 的时候会出现小绿条，提示当前运行配置 </li>
<li>增加对色弱 /色盲的配色支持 </li>
<li>支持一键运行 /测试</li>
</ol>
<p>编辑器 </p>
<ol>
<li>on-the-fly 冗余代码检测 </li>
<li>表达式、返回值类型推断 </li>
<li>可直接 encode 特殊的 HTML 字符，如 &gt; 会转换成 &gt;</li>
</ol>
<p>语言 </p>
<ol>
<li>Kotlin 支持 </li>
<li>Groovy 支持 2.3 版本中的 @Builder 注解 </li>
<li>Scala 支持增强</li>
</ol>
<p>框架 </p>
<ol>
<li>支持 Spring 4.2 特性 </li>
<li>Spring Boot 支援更好，如 application.yml 、 initializer 提示与配置 </li>
<li>Grails 支持 3.X 版本 </li>
<li>Arquilian &lt;- 我不懂是啥 </li>
<li>Android 增加 Android Studio 1.3 的新特性</li>
</ol>
<p>构建工具 </p>
<ol>
<li>Gradle/SBT &lt;- 引入时选择特定 modules</li>
</ol>
<p>前端（不太懂） </p>
<ol>
<li>TypeScript </li>
<li>React </li>
<li>AngularJS</li>
</ol>
<p>版本控制 </p>
<ol>
<li>可直接在 Commit dialog 窗口中修改代码 </li>
<li>支持 Rebase 功能 </li>
<li>分支操作 </li>
<li>Perforce 中的 Shelve （没用过）、 TFS 、 MQ 增强</li>
</ol>
<p>数据库工具<br>支持修改 Table 、多个查询窗口（终于支持了…）、执行计划（终于支持了…）等等等等</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿来主义，试了，确实好用哈。。。&lt;br&gt;注册方法:   注册码可以沿用14的,只是在 注册时选择 License server ，填 &lt;a href=&quot;http://idea.lanyus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JBoss 系列一：软件安装及资料下载</title>
    <link href="http://itsky88.com/2016/12/18/csdn/JBoss%20%E7%B3%BB%E5%88%97%E4%B8%80%EF%BC%9A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/"/>
    <id>http://itsky88.com/2016/12/18/csdn/JBoss 系列一：软件安装及资料下载/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>##内容概要<br>本部分包括本系列所需要的相关软件的安装，及资料的下载，内容列表如下：</p>
<ul>
<li><p>Apache httpd 安装</p>
</li>
<li><p>Java 安装</p>
</li>
<li><p>Maven 安装</p>
</li>
<li><p>Ant 安装</p>
</li>
<li><p>Git 客户端安装</p>
</li>
<li><p>JBoss<br>7 安装</p>
</li>
</ul>
<p>注意：Apache httpd是JBoss构建集群所必要，Java<br> ，Maven ，Ant 安装包括在Linux操作系统上安装的步骤。</p>
<p>##<a href=""></a>Apache httpd安装<br>Linux下安装Apache httpd 只需两步：</p>
<ol>
<li>从当前用户下切换到root用户</li>
</ol>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. su - root  </p>
<p>2.使用如下yum命令安装，安装完成后会显示完成提示</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. yum install httpd  </p>
<p>##<a href=""></a>Java安装</p>
<p>本处说明如何在Linux操作系统中安装Java.<br>1.从Oracle网站选择下载相应版本，例如选择下载jdk-7u10-linux-i586.tar.gz。<br>2.直接解压jdk-7u10-linux-i586.tar.gz，将会得到jdk1.7.0_10目录:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. tar -xzvf jdk-7u10-linux-i586.tar.gz  </p>
<p>3.编辑当前用户下面.bash_profile文件，添加JAVA_HOME:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. JAVA_HOME=/usr/java/jdk1.7.0_10  </p>
<ol>
<li><p>export JAVA_HOME  </p>
</li>
<li><p>编辑当前用户下面.bash_profile文件，将java添加到当前环境变量:</p>
</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. PATH=$JAVA_HOME/bin:$PATH  </p>
<ol>
<li>export  PATH  </li>
</ol>
<p>5.创建java软链接:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ln -s /usr/java/jdk1.7.0_10/bin/java /etc/alternatives/java  </p>
<ol>
<li><p>ln -s /etc/alternatives/java /usr/bin/java  </p>
</li>
<li><p>检查java安装是否正确，安装完成后，新打开一个终端窗口，执行<strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br>plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. java -version  </p>
</li>
</ol>
<p>如果输出如下信息则表明安装成功</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. java version “1.7.0_10”  </p>
<ol>
<li>Java(TM) SE Runtime Environment (build 1.7.0_10-b18)  </li>
<li>Java HotSpot(TM) Server VM (build 23.6-b04, mixed mode)  </li>
</ol>
<p>##<a href=""></a>Maven安装<br>本处说明如何在Linux操作系统中安装Maven。</p>
<p>1.<br> 下载</p>
<p>从Maven网站（<a href="http://maven.apache.org/）下载相应版本，例如我们下载apache-maven-3.0.4-bin.zip。" target="_blank" rel="external">http://maven.apache.org/）下载相应版本，例如我们下载apache-maven-3.0.4-bin.zip。</a></p>
<ol>
<li>安装<br>解压下载的zip文件：<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br>plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip apache-maven-3.0.4-bin.zip  </li>
</ol>
<p>解压完成apache-maven-3.0.4文件夹生成，编辑当前用户下面.bash_profile文件，添加M3_HOME，将mvn添加到当前用户环境变量，添加Mavan运行的初始堆栈大小，如下：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. export M3_HOME=”/usr/maven/apache-maven-3.0.4”  </p>
<ol>
<li>export PATH=”$M3_HOME/bin:$PATH”  </li>
<li>export MAVEN_OPTS=”-Xms256m -Xmx1024m -XX:MaxPermSize=512m”  </li>
</ol>
<p>检查Maven安装是否正确，安装完成后，新打开一个终端窗口，执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. mvn -version  </p>
<p>如果输出如下信息则表明安装成功。</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. Apache Maven 3.0.4 (r1232337; 2012-01-17 16:44:56+0800)  </p>
<p>##<a href=""></a>Ant安装</p>
<p>本处说明如何在Linux操作系统中安装Ant。<br>1.下载<br>从Ant网站（<a href="http://ant.apache.org/）下载相对应版本，例如我们选择下载二进制文件apache-ant-1.8.1-bin.zip。" target="_blank" rel="external">http://ant.apache.org/）下载相对应版本，例如我们选择下载二进制文件apache-ant-1.8.1-bin.zip。</a><br>2.安装解压下载的zip文件，我们将会得到apache-ant-1.8.1目录：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip apache-ant-1.8.1-bin.zip  </p>
<p>解压完成apache-ant-1.8.1文件夹生成，编辑当前用户下面.bash_profile文件，添加ANT_HOME如下：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ANT_HOME=/usr/ant/apache-ant-1.8.1  </p>
<ol>
<li>export ANT_HOME  </li>
</ol>
<p>编辑当前用户下面.bash_profile文件，将Ant添加到当前环境变量：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. PATH=$ANT_HOME/bin:$PATH  </p>
<ol>
<li>export PATH  </li>
</ol>
<p>检查Ant安装是否正确，安装完成后，新打开一个终端窗口，执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ant -version  </p>
<p>如果输出如下信息则表明安装成功。</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. Apache Ant version 1.8.1 compiled on April 30 2010  </p>
<p>##<a href=""></a>Git 客户端安装</p>
<p>1.注册Github</p>
<pre><code>GitHub是一个用于使用Git版本控制系统项目的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发经营，是目前最大的开源社区，JGroups、Infinispan等开源产品源代码都托管在GitHub，本书所涵盖的所有源代码也位于GitHub之上，我们从GitHub克隆代码需要安全认证，即将与自己机器匹配的公钥发布在GitHub上，所以我们需要注册一个账号。具体登录注册页面（[https://github.com/users](https://github.com/users)）填写自己用户名，邮箱地址，密码完成注册。
</code></pre><ol>
<li>Linux下Git客户端安装<br>Fedora 15操作系统默认已经安装了Git 客户端包（如没有安装使用yum安装）。我们只需打开一个新的终端窗口，进行相应的初始化配置。<br>设定用户名，在终端窗口中执行：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.name “ksoong”  </p>
<p>设定默认邮件地址，在终端窗口中执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.mail “kylinsoong.1214@gmail.com”  </p>
<p>生成SSH安全认证公钥和私钥，在终端窗口中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ssh-keygen -t rsa -C “kylinsoong.1214@gmail.com”  </p>
<p>运行时需要输入文件保存路径和加密串，生成完成后，当前用户下会创建.ssh目录（/home/kylin/.ssh），该目录下存在公钥和私钥文件分别为id_rsa.pub，id_rsa。<br>接下来我们将上面生成的公钥添加到github。首先拷贝id_rsa.pub文件中的内容，然后登录到自己的github主页，例如<a href="https://github.com/kylinsoong，点击账号设定、SSH" target="_blank" rel="external">https://github.com/kylinsoong，点击账号设定、SSH</a><br> Keys、添加新的SSH Key ，在标题部分添加标题，在内容部分粘贴拷贝的公钥内容，如下图所示:<img src="http://img.blog.csdn.net/20131004214958593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>点击添加按钮完成添加。至此，Linux下Git客户端安装配置完成，我们可以通过克隆github上项目仓库来检测设定是否正确，如下:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git  clone git@github.com:kylinsoong/csdn.git  </p>
<p>3.Windows下Git客户端安装</p>
<p>从git客户端网站下载并安装git。如我们从<a href="http://git-scm.com/downloads下载Git-1.8.1.2-preview20130201.exe，下载完成点击安装，安装完成后，在windows操作系统桌面点击快捷按钮进入Git" target="_blank" rel="external">http://git-scm.com/downloads下载Git-1.8.1.2-preview20130201.exe，下载完成点击安装，安装完成后，在windows操作系统桌面点击快捷按钮进入Git</a> Bash命令行进行初始化配置。<br>设定用户名，在Git Bash中执行:<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.name “ksoong”  </p>
<p>设定默认邮件地址，在Git Bash中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.mail “kylinsoong.1214@gmail.com”  </p>
<p>生成SSH安全认证公钥和私钥，在Git Bash中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ssh-keygen -t rsa -C “kylinsoong.1214@gmail.com”  </p>
<p>运行时需要输入文件保存路径和加密串，生成完成后，当前用户下会创建.ssh目录，该目录下存在公钥和私钥文件分别为id_rsa.pub，id_rsa。<br>我们通过如下步骤将生成的公钥添加到github:同样在Git<br> Bash命令行执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. clip &lt; ~/.ssh/id_rsa.pub  </p>
<p>拷贝id_rsa.pub文件中的内容。<br>登录到自己的github主页，例如<a href="https://github.com/kylinsoong，点击账号设定、SSH" target="_blank" rel="external">https://github.com/kylinsoong，点击账号设定、SSH</a><br> Keys、添加新的SSH Key ，在标题部分添加标题，在内容部分粘贴步骤一拷贝的公钥内容，如下图所示:<img src="http://img.blog.csdn.net/20131004215700296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>点击添加按钮完成添加。至此，Windows下Git客户端安装配置完成，我们可以通过克隆github上项目仓库来检测设定是否正确，如下:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git  clone git@github.com:kylinsoong/csdn.git  </p>
<p>##<a href=""></a>JBoss<br> 7 安装<br>1.下载：<br>登录JBoss下载网站（<a href="http://www.jboss.org/jbossas/downloads）" target="_blank" rel="external">http://www.jboss.org/jbossas/downloads）</a> 选择版本7模块，点击相关版本下载，比如7.1.1.Final。</p>
<ol>
<li>安装<br>解压步骤1下载下载的 .zip 文件即完成安装，Linux下使用解压命令：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip jboss-as-7.1.1.Final.zip  </p>
<p>3.创建初始管理用户<br>到JBOSS_HOME/bin下面执行创建初始管理用户脚本，Linux系统执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./add-user.sh  </p>
<p>Windows系统下执行<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. add-user.bat  </p>
<p>选择Management User，如下图<br><img src="http://img.blog.csdn.net/20131004220923734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>如上，在提示输入username和password时输入相应的用户名和密码，我们随后会使用它登录管理控制台。</p>
<ol>
<li>启动 JBoss<br>7<br>JBoss7包含两种模式standalone模式和domain模式，我们可以通过如下命令分别启动standalone模式和domain模式：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./standalone.sh  </p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./domain.sh  </p>
<p>同样在windows下使用如下命令：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. standalone.bat  </p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. domain.bat  </p>
<p>启动完成及添加用户完成后点击 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 查看 JBoss Application Server 7 欢迎页面,点击<a href="http://localhost:8080/console" target="_blank" rel="external">Administration<br> Console</a> 进入JBoss7控制台，如下：<br><img src="http://img.blog.csdn.net/20131004222035593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>5..进入JBossApplication Server 7命令行管理除了图形化管理界面外，JBoss 7还提供了命令行管理工具，具体到JBOSS_HOME/bin下执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./jboss-cli.sh  </p>
<p>Windows下执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. jboss-cli.bat  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##内容概要&lt;br&gt;本部分包括本系列所需要的相关软件的安装，及资料的下载，内容列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache httpd 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maven 安装&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Junit测试出现异常：Exception in thread &quot;main&quot; java.lang.NoSuchMethodError org.junit.runner.Description.cre</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Junit%E6%B5%8B%E8%AF%95%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9AException%20in%20thread%20main%20java.lang.NoSuchMethodError%20org.junit.runner.Description.cre/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Junit测试出现异常：Exception in thread main java.lang.NoSuchMethodError org.junit.runner.Description.cre/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看错误：</p>
<pre><code class="java">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: org.junit.runner.Description.createSuiteDescription(Ljava/lang/String;[Ljava/lang/annotation/Annotation;)Lorg/junit/runner/Description;
    at com.intellij.junit4.JUnit4TestListener.testStarted(JUnit4TestListener.java:96)
    at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:83)
    at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:37)
    at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:80)
    at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:39)
    at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:75)
    at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:36)
    at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)
    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
    at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:130)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
</code></pre>
<p>经过资料查询，发现是junit版本的问题，改成4.11即恢复正常，现在是4.2版本。运行结果：<br><img src="http://img.blog.csdn.net/20151118112634813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20151118112816775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来看看错误：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.NoSuchMethodError: org.junit.runner.Description.create
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux date命令</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Linux%20date%E5%91%BD%E4%BB%A4/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Linux date命令/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>date命令的帮助信息<br> [root@localhost source]# date –help<br>用法：date [选项]… [+格式]<br>　或：date [-u|–utc|–universal] [MMDDhhmm[[CC]YY][.ss]]<br>以给定的格式显示当前时间，或是设置系统日期。</p>
<p>  -d,–date=字符串              显示指定字符串所描述的时间，而非当前时间<br>  -f,–file=日期文件            类似–date，从日期文件中按行读入时间描述<br>  -r, –reference=文件          显示文件指定文件的最后修改时间<br>  -R, –rfc-2822                以RFC 2822格式输出日期和时间<br>                                例如：2006年8月7日，星期一 12:34:56 -0600<br>      –rfc-3339=TIMESPEC       以RFC 3339 格式输出日期和时间。<br>                                TIMESPEC=<code>date&#39;，</code>seconds’，或 `ns’<br>                                表示日期和时间的显示精度。<br>                                日期和时间单元由单个的空格分开：<br>                                2006-08-07 12:34:56-06:00<br>  -s, –set=字符串              设置指定字符串来分开时间<br>  -u, –utc, –universal        输出或者设置协调的通用时间<br>      –help            显示此帮助信息并退出<br>      –version         显示版本信息并退出</p>
<p>给定的格式FORMAT 控制着输出，解释序列如下：</p>
<p>  %%    一个文字的 %<br>  %a    当前locale 的星期名缩写(例如： 日，代表星期日)<br>  %A    当前locale 的星期名全称 (如：星期日)<br>  %b    当前locale 的月名缩写 (如：一，代表一月)<br>  %B    当前locale 的月名全称 (如：一月)<br>  %c    当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)<br>  %C    世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)<br>  %d    按月计的日期(例如：01)<br>  %D    按月计的日期；等于%m/%d/%y<br>  %e    按月计的日期，添加空格，等于%_d<br>  %F    完整日期格式，等价于 %Y-%m-%d<br>  %g    ISO-8601 格式年份的最后两位 (参见%G)<br>  %G    ISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用<br>  %h    等于%b<br>  %H    小时(00-23)<br>  %I    小时(00-12)<br>  %c    按年计的日期(001-366)<br>  %k    时(0-23)<br>  %l    时(1-12)<br>  %m    月份(01-12)<br>  %M    分(00-59)<br>  %n    换行<br>  %N    纳秒(000000000-999999999)<br>  %p    当前locale 下的”上午”或者”下午”，未知时输出为空<br>  %P    与%p 类似，但是输出小写字母<br>  %r    当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)<br>  %R    24 小时时间的时和分，等价于 %H:%M<br>  %s    自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数<br>  %S    秒(00-60)<br>  %t    输出制表符 Tab<br>  %T    时间，等于%H:%M:%S<br>  %u    星期，1 代表星期一<br>  %U    一年中的第几周，以周日为每星期第一天(00-53)<br>  %V    ISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)<br>  %w    一星期中的第几日(0-6)，0 代表周一<br>  %W    一年中的第几周，以周一为每星期第一天(00-53)<br>  %x    当前locale 下的日期描述 (如：12/31/99)<br>  %X    当前locale 下的时间描述 (如：23:13:48)<br>  %y    年份最后两位数位 (00-99)<br>  %Y    年份<br>  %z +hhmm              数字时区(例如，-0400)<br>  %:z +hh:mm            数字时区(例如，-04:00)<br>  %::z +hh:mm:ss        数字时区(例如，-04:00:00)<br>  %:::z                 数字时区带有必要的精度 (例如，-04，+05:30)<br>  %Z                    按字母表排序的时区缩写 (例如，EDT)</p>
<p>默认情况下，日期的数字区域以0 填充。<br>以下可选标记可以跟在”%”后:</p>
<ul>
<li>(连字符)不填充该域<br>_ (下划线)以空格填充<br>0 (数字0)以0 填充<br>^ 如果可能，使用大写字母<h1 id="如果可能，使用相反的大小写"><a href="#如果可能，使用相反的大小写" class="headerlink" title="如果可能，使用相反的大小写"></a>如果可能，使用相反的大小写</h1></li>
</ul>
<p>在任何标记之后还允许一个可选的域宽度指定，它是一个十进制数字。<br>作为一个可选的修饰声明，它可以是E，在可能的情况下使用本地环境关联的<br>表示方式；或者是O，在可能的情况下使用本地环境关联的数字符号。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;date命令的帮助信息&lt;br&gt; [root@localhost source]# date –help&lt;br&gt;用法：date [选项]… [+格式]&lt;br&gt;　或：date [-u|–utc|–universal] [MMDDhhmm[[CC]YY][.ss]]&lt;br&gt;以给定
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jquery form 插件原文档</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Jquery%20form%20%E6%8F%92%E4%BB%B6%E5%8E%9F%E6%96%87%E6%A1%A3/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Jquery form 插件原文档/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://malsup.com/jquery/form/#options-object" target="_blank" rel="external">http://malsup.com/jquery/form/#options-object</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://malsup.com/jquery/form/#options-object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://malsup.com/jquery/form/#options-object&lt;/a&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux根据内容查找所在文件名</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Linux%E6%A0%B9%E6%8D%AE%E5%86%85%E5%AE%B9%E6%9F%A5%E6%89%BE%E6%89%80%E5%9C%A8%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Linux根据内容查找所在文件名/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到要查找一个表名在哪个python文件中，网上搜了下命令，运行没问题，所以拿出来跟大家分享下：</p>
<p>案例：查找表名为 rs_all_user_pv_category 的内容在哪个python文件中</p>
<pre><code class="python">find . -name &quot;*.py&quot; | xargs grep &quot;rs_all_user_pv_category&quot;
</code></pre>
<p>命令含义： 在当前目录下查找  rs_all_user_pv_category  在哪个以.py结尾的文件中输出结果：<br>./rs_all_user_pv_category.py:print ‘&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; BEGIN rs_all_user_pv_category.py’<br>./rs_all_user_pv_category.py:# python rs_all_user_pv_category.py $(date +%Y-%m-%d -d ‘-1 day’)</p>
<p>有待研究的：过滤掉重复的文件名，并只显示文件名称，，，，，，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到要查找一个表名在哪个python文件中，网上搜了下命令，运行没问题，所以拿出来跟大家分享下：&lt;/p&gt;
&lt;p&gt;案例：查找表名为 rs_all_user_pv_category 的内容在哪个python文件中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
