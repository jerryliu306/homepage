<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ITSky</title>
  <subtitle>专注于Linux、Hadoop、Hive、Spark、Kaffka、Redis、MongoDB、ElasticSearch等技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itsky88.com/"/>
  <updated>2016-12-18T09:34:18.000Z</updated>
  <id>http://itsky88.com/</id>
  
  <author>
    <name>JerryLiu</name>
    <email>1031757312@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hive根据日期获取星期几的方法</title>
    <link href="http://itsky88.com/2016/12/18/csdn/hive%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%E8%8E%B7%E5%8F%96%E6%98%9F%E6%9C%9F%E5%87%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://itsky88.com/2016/12/18/csdn/hive根据日期获取星期几的方法/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>hive原生未提供获取一个日期是星期几的方法，所以只有我们自己编写udf函数提供，udf就不说了，在这里给出了一个使用hive原生函数获取星期几的技巧。<br>pmod(datediff(#date#, ‘1920-01-01’) - 3, 7) </p>
<p>#date#表示给的日期。<br>输出的结果为0-6的数，分别表示 日，一，二 … 六。<br>2016-01-01 5<br>2016-01-026<br>2016-01-030</p>
<p>如果想让周一到周六对应数字1-7只需要将查询出来的数据进行判断就行了，如下：<br>IF(pmod(datediff(#date#, ‘1920-01-01’) - 3, 7)=’0’,<br> 7, pmod(datediff(#date#, ‘1920-01-01’) - 3, 7))</p>
<p>2016-01-01 5<br>2016-01-026<br>2016-01-037</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hive原生未提供获取一个日期是星期几的方法，所以只有我们自己编写udf函数提供，udf就不说了，在这里给出了一个使用hive原生函数获取星期几的技巧。&lt;br&gt;pmod(datediff(#date#, ‘1920-01-01’) - 3, 7) &lt;/p&gt;
&lt;p&gt;#date
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>马士兵Hibernate学习笔记</title>
    <link href="http://itsky88.com/2016/12/18/csdn/%E9%A9%AC%E5%A3%AB%E5%85%B5Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://itsky88.com/2016/12/18/csdn/马士兵Hibernate学习笔记/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/tanyit/article/details/6987279" target="_blank" rel="external">http://blog.csdn.net/tanyit/article/details/6987279</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/tanyit/article/details/6987279&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/tanyit/article/details/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键的使用，很实用</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%BE%88%E5%AE%9E%E7%94%A8/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Eclipse快捷键的使用，很实用/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.open-open.com/bbs/view/1320934157953" target="_blank" rel="external">http://www.open-open.com/bbs/view/1320934157953</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.open-open.com/bbs/view/1320934157953&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.open-open.com/bbs/view/1320934157953&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FATAL Fatal error during KafkaServerStartable startup. java.lang.OutOfMemoryError Java heap space</title>
    <link href="http://itsky88.com/2016/12/18/csdn/FATAL%20Fatal%20error%20during%20KafkaServerStartable%20startup.%20java.lang.OutOfMemoryError%20Java%20heap%20space/"/>
    <id>http://itsky88.com/2016/12/18/csdn/FATAL Fatal error during KafkaServerStartable startup. java.lang.OutOfMemoryError Java heap space/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天搭建了kafka单机版用于测试，配置好以后启动kafka时出现了内存溢出的问题，如下： </p>
<pre><code class="java">[2016-10-22 10:39:39,112] INFO [Kafka Server 0], shut down completed (kafka.server.KafkaServer)
[2016-10-22 10:39:39,113] FATAL Fatal error during KafkaServerStartable startup. Prepare to shutdown (kafka.server.KafkaServerStartable)
java.lang.OutOfMemoryError: Java heap space
    at java.nio.HeapByteBuffer.&lt;init&gt;(HeapByteBuffer.java:57)
    at java.nio.ByteBuffer.allocate(ByteBuffer.java:335)
    at kafka.log.SkimpyOffsetMap.&lt;init&gt;(OffsetMap.scala:42)
    at kafka.log.LogCleaner$CleanerThread.&lt;init&gt;(LogCleaner.scala:177)
    at kafka.log.LogCleaner$$anonfun$1.apply(LogCleaner.scala:86)
    at kafka.log.LogCleaner$$anonfun$1.apply(LogCleaner.scala:86)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
    at scala.collection.immutable.Range.foreach(Range.scala:141)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
    at scala.collection.AbstractTraversable.map(Traversable.scala:105)
    at kafka.log.LogCleaner.&lt;init&gt;(LogCleaner.scala:86)
    at kafka.log.LogManager.&lt;init&gt;(LogManager.scala:64)
    at kafka.server.KafkaServer.createLogManager(KafkaServer.scala:335)
    at kafka.server.KafkaServer.startup(KafkaServer.scala:85)
    at kafka.server.KafkaServerStartable.startup(KafkaServerStartable.scala:29)
    at kafka.Kafka$.main(Kafka.scala:46)
    at kafka.Kafka.main(Kafka.scala)
[2016-10-22 10:39:39,114] INFO EventThread shut down (org.apache.zookeeper.ClientCnxn)
[2016-10-22 10:39:39,116] INFO [Kafka Server 0], shutting down (kafka.server.KafkaServer)
</code></pre>
<p>解决方法：<br>编辑 kafka/kafka-server-start.sh 这个启动文件，修改 KAFKA_HEAP_OPTS 这个参数，默认的参数是 export KAFKA_HEAP_OPTS=”-Xmx512m -Xms512m”，增大内存即可，export KAFKA_HEAP_OPTS=”-Xmx1g -Xms1g”，再次启动问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天搭建了kafka单机版用于测试，配置好以后启动kafka时出现了内存溢出的问题，如下： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;[2016-10-22 10:39:39,112] INFO [Kafka Server 0], shut down com
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HighCharts点击柱形或饼块加URL或Click事件</title>
    <link href="http://itsky88.com/2016/12/18/csdn/HighCharts%E7%82%B9%E5%87%BB%E6%9F%B1%E5%BD%A2%E6%88%96%E9%A5%BC%E5%9D%97%E5%8A%A0URL%E6%88%96Click%E4%BA%8B%E4%BB%B6/"/>
    <id>http://itsky88.com/2016/12/18/csdn/HighCharts点击柱形或饼块加URL或Click事件/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在做图表的时候，有时候需要在单个数据上加链接或点击事件，是在plotOptions里的events里设置的<br><code>01``plotOptions:
 {``02``    ``pie:
 {``03``        ``cursor: ``&#39;pointer&#39;``,``04``        ``events:
 {``05``            ``click: ``function``(e)
 {``06``        ``location.href
 = e.point.url;&lt;span&gt;&lt;/span&gt; ``//上面是当前页跳转，如果是要跳出新页面，那就用``07``                ``//window.open(e.point.url);``08``                ``//这里的url要后面的data里给出``09``        ``}``10``    ``},``11``    ``}``12``},``13``series:
 [{``14``    ``data:
 [``15``        ``{name:``&#39;地产组&#39;``,y:76,url:``&#39;http://www.baidu.com&#39;``},``16``   
     ``{name:``&#39;能源组&#39;``,y:54,url:``&#39;&lt;span&gt;&lt;/span&gt;http://www.google.com&lt;span&gt;&lt;/span&gt;&#39;``},&lt;span&gt;&lt;/span&gt;
             {``17``   
     ``{name:``&#39;互联网&#39;``,y:20,url:``&#39;http://www.sohu.com&#39;``}``18``}]</code>以上是针对饼图的，如果是柱形图那就把pie:{}换成column : {}当然如果换成series:{}那就不用管是饼图还是柱形图或是其他图形了</p>
<p><code>01``plotOptions:
 {``02``    ``series:
 {``03``        ``cursor: ``&#39;pointer&#39;``,``04``        ``events:
 {``05``            ``click: ``function``(e)
 {``06``        ``location.href
 = e.point.url;``07``                ``//上面是当前页跳转，如果是要跳出新页面，那就用``08``                ``//window.open(e.point.url);``09``                ``//这里的url要后面的data里给出``10``        ``}``11``    ``},``12``    ``}``13``},``14``series:
 [{``15``    ``data:
 [``16``        ``{name:``&#39;地产组&#39;``,y:76,url:``&#39;http://www.baidu.com&#39;``},``17``        ``{name:``&#39;能源组&#39;``,y:54,url:``&#39;http://www.google.com&#39;``},            
 {``18``        ``{name:``&#39;互联网&#39;``,y:20,url:``&#39;http://www.sohu.com&#39;``}``19``}]</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在做图表的时候，有时候需要在单个数据上加链接或点击事件，是在plotOptions里的events里设置的&lt;br&gt;&lt;code&gt;01``plotOptions:
 {``02``    ``pie:
 {``03``        ``cursor: ``&amp;#39;poi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ImportError No module named apt_pkg</title>
    <link href="http://itsky88.com/2016/12/18/csdn/ImportError%20No%20module%20named%20apt_pkg/"/>
    <id>http://itsky88.com/2016/12/18/csdn/ImportError No module named apt_pkg/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="python">
</code></pre>
<pre><code class="python">Traceback (most recent call last):
  File &quot;/usr/bin/apt-listchanges&quot;, line 28, in &lt;module&gt;
    import apt_pkg
ImportError: No module named apt_pkg

sudo apt-get remove --purge python-apt
sudo apt-get install python-apt
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;Traceback (most recent call last):
  File &amp;quot;/usr/bin/apt-listchanges&amp;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 15 Released 破解 注册码</title>
    <link href="http://itsky88.com/2016/12/18/csdn/IntelliJ%20IDEA%2015%20Released%20%E7%A0%B4%E8%A7%A3%20%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://itsky88.com/2016/12/18/csdn/IntelliJ IDEA 15 Released 破解 注册码/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>拿来主义，试了，确实好用哈。。。<br>注册方法:   注册码可以沿用14的,只是在 注册时选择 License server ，填 <a href="http://idea.lanyus.com" target="_blank" rel="external">http://idea.lanyus.com</a> ，然后点击 OK</p>
<p><a href="https://www.jetbrains.com/idea/whatsnew/" target="_blank" rel="external">https://www.jetbrains.com/idea/whatsnew/</a><br><a href="http://blog.jetbrains.com/idea/2015/11/intellij-idea-15-released-adds-kotlin-to-the-family-of-supported-jvm-languages/" target="_blank" rel="external">http://blog.jetbrains.com/idea/2015/11/intellij-idea-15-released-adds-kotlin-to-the-family-of-supported-jvm-languages/</a></p>
<p>Debug </p>
<ol>
<li>支持 Lambda 表达式 Debug ，之前版本只能使用推倒 </li>
<li>Debug 时可强制方法 /表达式返回值</li>
</ol>
<p>用户界面 </p>
<ol>
<li>测试 UI 提升，增加大量统计功能 </li>
<li>“Find in Path”功能增加行内代码搜索 </li>
<li>Run 的时候会出现小绿条，提示当前运行配置 </li>
<li>增加对色弱 /色盲的配色支持 </li>
<li>支持一键运行 /测试</li>
</ol>
<p>编辑器 </p>
<ol>
<li>on-the-fly 冗余代码检测 </li>
<li>表达式、返回值类型推断 </li>
<li>可直接 encode 特殊的 HTML 字符，如 &gt; 会转换成 &gt;</li>
</ol>
<p>语言 </p>
<ol>
<li>Kotlin 支持 </li>
<li>Groovy 支持 2.3 版本中的 @Builder 注解 </li>
<li>Scala 支持增强</li>
</ol>
<p>框架 </p>
<ol>
<li>支持 Spring 4.2 特性 </li>
<li>Spring Boot 支援更好，如 application.yml 、 initializer 提示与配置 </li>
<li>Grails 支持 3.X 版本 </li>
<li>Arquilian &lt;- 我不懂是啥 </li>
<li>Android 增加 Android Studio 1.3 的新特性</li>
</ol>
<p>构建工具 </p>
<ol>
<li>Gradle/SBT &lt;- 引入时选择特定 modules</li>
</ol>
<p>前端（不太懂） </p>
<ol>
<li>TypeScript </li>
<li>React </li>
<li>AngularJS</li>
</ol>
<p>版本控制 </p>
<ol>
<li>可直接在 Commit dialog 窗口中修改代码 </li>
<li>支持 Rebase 功能 </li>
<li>分支操作 </li>
<li>Perforce 中的 Shelve （没用过）、 TFS 、 MQ 增强</li>
</ol>
<p>数据库工具<br>支持修改 Table 、多个查询窗口（终于支持了…）、执行计划（终于支持了…）等等等等</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿来主义，试了，确实好用哈。。。&lt;br&gt;注册方法:   注册码可以沿用14的,只是在 注册时选择 License server ，填 &lt;a href=&quot;http://idea.lanyus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jquery form 插件原文档</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Jquery%20form%20%E6%8F%92%E4%BB%B6%E5%8E%9F%E6%96%87%E6%A1%A3/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Jquery form 插件原文档/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://malsup.com/jquery/form/#options-object" target="_blank" rel="external">http://malsup.com/jquery/form/#options-object</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://malsup.com/jquery/form/#options-object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://malsup.com/jquery/form/#options-object&lt;/a&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JBoss 系列一：软件安装及资料下载</title>
    <link href="http://itsky88.com/2016/12/18/csdn/JBoss%20%E7%B3%BB%E5%88%97%E4%B8%80%EF%BC%9A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/"/>
    <id>http://itsky88.com/2016/12/18/csdn/JBoss 系列一：软件安装及资料下载/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>##内容概要<br>本部分包括本系列所需要的相关软件的安装，及资料的下载，内容列表如下：</p>
<ul>
<li><p>Apache httpd 安装</p>
</li>
<li><p>Java 安装</p>
</li>
<li><p>Maven 安装</p>
</li>
<li><p>Ant 安装</p>
</li>
<li><p>Git 客户端安装</p>
</li>
<li><p>JBoss<br>7 安装</p>
</li>
</ul>
<p>注意：Apache httpd是JBoss构建集群所必要，Java<br> ，Maven ，Ant 安装包括在Linux操作系统上安装的步骤。</p>
<p>##<a href=""></a>Apache httpd安装<br>Linux下安装Apache httpd 只需两步：</p>
<ol>
<li>从当前用户下切换到root用户</li>
</ol>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. su - root  </p>
<p>2.使用如下yum命令安装，安装完成后会显示完成提示</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. yum install httpd  </p>
<p>##<a href=""></a>Java安装</p>
<p>本处说明如何在Linux操作系统中安装Java.<br>1.从Oracle网站选择下载相应版本，例如选择下载jdk-7u10-linux-i586.tar.gz。<br>2.直接解压jdk-7u10-linux-i586.tar.gz，将会得到jdk1.7.0_10目录:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. tar -xzvf jdk-7u10-linux-i586.tar.gz  </p>
<p>3.编辑当前用户下面.bash_profile文件，添加JAVA_HOME:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. JAVA_HOME=/usr/java/jdk1.7.0_10  </p>
<ol>
<li><p>export JAVA_HOME  </p>
</li>
<li><p>编辑当前用户下面.bash_profile文件，将java添加到当前环境变量:</p>
</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. PATH=$JAVA_HOME/bin:$PATH  </p>
<ol>
<li>export  PATH  </li>
</ol>
<p>5.创建java软链接:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ln -s /usr/java/jdk1.7.0_10/bin/java /etc/alternatives/java  </p>
<ol>
<li><p>ln -s /etc/alternatives/java /usr/bin/java  </p>
</li>
<li><p>检查java安装是否正确，安装完成后，新打开一个终端窗口，执行<strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br>plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. java -version  </p>
</li>
</ol>
<p>如果输出如下信息则表明安装成功</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. java version “1.7.0_10”  </p>
<ol>
<li>Java(TM) SE Runtime Environment (build 1.7.0_10-b18)  </li>
<li>Java HotSpot(TM) Server VM (build 23.6-b04, mixed mode)  </li>
</ol>
<p>##<a href=""></a>Maven安装<br>本处说明如何在Linux操作系统中安装Maven。</p>
<p>1.<br> 下载</p>
<p>从Maven网站（<a href="http://maven.apache.org/）下载相应版本，例如我们下载apache-maven-3.0.4-bin.zip。" target="_blank" rel="external">http://maven.apache.org/）下载相应版本，例如我们下载apache-maven-3.0.4-bin.zip。</a></p>
<ol>
<li>安装<br>解压下载的zip文件：<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br>plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip apache-maven-3.0.4-bin.zip  </li>
</ol>
<p>解压完成apache-maven-3.0.4文件夹生成，编辑当前用户下面.bash_profile文件，添加M3_HOME，将mvn添加到当前用户环境变量，添加Mavan运行的初始堆栈大小，如下：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. export M3_HOME=”/usr/maven/apache-maven-3.0.4”  </p>
<ol>
<li>export PATH=”$M3_HOME/bin:$PATH”  </li>
<li>export MAVEN_OPTS=”-Xms256m -Xmx1024m -XX:MaxPermSize=512m”  </li>
</ol>
<p>检查Maven安装是否正确，安装完成后，新打开一个终端窗口，执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. mvn -version  </p>
<p>如果输出如下信息则表明安装成功。</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. Apache Maven 3.0.4 (r1232337; 2012-01-17 16:44:56+0800)  </p>
<p>##<a href=""></a>Ant安装</p>
<p>本处说明如何在Linux操作系统中安装Ant。<br>1.下载<br>从Ant网站（<a href="http://ant.apache.org/）下载相对应版本，例如我们选择下载二进制文件apache-ant-1.8.1-bin.zip。" target="_blank" rel="external">http://ant.apache.org/）下载相对应版本，例如我们选择下载二进制文件apache-ant-1.8.1-bin.zip。</a><br>2.安装解压下载的zip文件，我们将会得到apache-ant-1.8.1目录：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip apache-ant-1.8.1-bin.zip  </p>
<p>解压完成apache-ant-1.8.1文件夹生成，编辑当前用户下面.bash_profile文件，添加ANT_HOME如下：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ANT_HOME=/usr/ant/apache-ant-1.8.1  </p>
<ol>
<li>export ANT_HOME  </li>
</ol>
<p>编辑当前用户下面.bash_profile文件，将Ant添加到当前环境变量：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. PATH=$ANT_HOME/bin:$PATH  </p>
<ol>
<li>export PATH  </li>
</ol>
<p>检查Ant安装是否正确，安装完成后，新打开一个终端窗口，执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ant -version  </p>
<p>如果输出如下信息则表明安装成功。</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. Apache Ant version 1.8.1 compiled on April 30 2010  </p>
<p>##<a href=""></a>Git 客户端安装</p>
<p>1.注册Github</p>
<pre><code>GitHub是一个用于使用Git版本控制系统项目的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发经营，是目前最大的开源社区，JGroups、Infinispan等开源产品源代码都托管在GitHub，本书所涵盖的所有源代码也位于GitHub之上，我们从GitHub克隆代码需要安全认证，即将与自己机器匹配的公钥发布在GitHub上，所以我们需要注册一个账号。具体登录注册页面（[https://github.com/users](https://github.com/users)）填写自己用户名，邮箱地址，密码完成注册。
</code></pre><ol>
<li>Linux下Git客户端安装<br>Fedora 15操作系统默认已经安装了Git 客户端包（如没有安装使用yum安装）。我们只需打开一个新的终端窗口，进行相应的初始化配置。<br>设定用户名，在终端窗口中执行：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.name “ksoong”  </p>
<p>设定默认邮件地址，在终端窗口中执行：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.mail “kylinsoong.1214@gmail.com”  </p>
<p>生成SSH安全认证公钥和私钥，在终端窗口中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ssh-keygen -t rsa -C “kylinsoong.1214@gmail.com”  </p>
<p>运行时需要输入文件保存路径和加密串，生成完成后，当前用户下会创建.ssh目录（/home/kylin/.ssh），该目录下存在公钥和私钥文件分别为id_rsa.pub，id_rsa。<br>接下来我们将上面生成的公钥添加到github。首先拷贝id_rsa.pub文件中的内容，然后登录到自己的github主页，例如<a href="https://github.com/kylinsoong，点击账号设定、SSH" target="_blank" rel="external">https://github.com/kylinsoong，点击账号设定、SSH</a><br> Keys、添加新的SSH Key ，在标题部分添加标题，在内容部分粘贴拷贝的公钥内容，如下图所示:<img src="http://img.blog.csdn.net/20131004214958593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>点击添加按钮完成添加。至此，Linux下Git客户端安装配置完成，我们可以通过克隆github上项目仓库来检测设定是否正确，如下:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git  clone git@github.com:kylinsoong/csdn.git  </p>
<p>3.Windows下Git客户端安装</p>
<p>从git客户端网站下载并安装git。如我们从<a href="http://git-scm.com/downloads下载Git-1.8.1.2-preview20130201.exe，下载完成点击安装，安装完成后，在windows操作系统桌面点击快捷按钮进入Git" target="_blank" rel="external">http://git-scm.com/downloads下载Git-1.8.1.2-preview20130201.exe，下载完成点击安装，安装完成后，在windows操作系统桌面点击快捷按钮进入Git</a> Bash命令行进行初始化配置。<br>设定用户名，在Git Bash中执行:<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.name “ksoong”  </p>
<p>设定默认邮件地址，在Git Bash中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git config –global user.mail “kylinsoong.1214@gmail.com”  </p>
<p>生成SSH安全认证公钥和私钥，在Git Bash中执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ssh-keygen -t rsa -C “kylinsoong.1214@gmail.com”  </p>
<p>运行时需要输入文件保存路径和加密串，生成完成后，当前用户下会创建.ssh目录，该目录下存在公钥和私钥文件分别为id_rsa.pub，id_rsa。<br>我们通过如下步骤将生成的公钥添加到github:同样在Git<br> Bash命令行执行:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. clip &lt; ~/.ssh/id_rsa.pub  </p>
<p>拷贝id_rsa.pub文件中的内容。<br>登录到自己的github主页，例如<a href="https://github.com/kylinsoong，点击账号设定、SSH" target="_blank" rel="external">https://github.com/kylinsoong，点击账号设定、SSH</a><br> Keys、添加新的SSH Key ，在标题部分添加标题，在内容部分粘贴步骤一拷贝的公钥内容，如下图所示:<img src="http://img.blog.csdn.net/20131004215700296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>点击添加按钮完成添加。至此，Windows下Git客户端安装配置完成，我们可以通过克隆github上项目仓库来检测设定是否正确，如下:</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. git  clone git@github.com:kylinsoong/csdn.git  </p>
<p>##<a href=""></a>JBoss<br> 7 安装<br>1.下载：<br>登录JBoss下载网站（<a href="http://www.jboss.org/jbossas/downloads）" target="_blank" rel="external">http://www.jboss.org/jbossas/downloads）</a> 选择版本7模块，点击相关版本下载，比如7.1.1.Final。</p>
<ol>
<li>安装<br>解压步骤1下载下载的 .zip 文件即完成安装，Linux下使用解压命令：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. unzip jboss-as-7.1.1.Final.zip  </p>
<p>3.创建初始管理用户<br>到JBOSS_HOME/bin下面执行创建初始管理用户脚本，Linux系统执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./add-user.sh  </p>
<p>Windows系统下执行<br><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. add-user.bat  </p>
<p>选择Management User，如下图<br><img src="http://img.blog.csdn.net/20131004220923734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>如上，在提示输入username和password时输入相应的用户名和密码，我们随后会使用它登录管理控制台。</p>
<ol>
<li>启动 JBoss<br>7<br>JBoss7包含两种模式standalone模式和domain模式，我们可以通过如下命令分别启动standalone模式和domain模式：</li>
</ol>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./standalone.sh  </p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./domain.sh  </p>
<p>同样在windows下使用如下命令：</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. standalone.bat  </p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. domain.bat  </p>
<p>启动完成及添加用户完成后点击 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 查看 JBoss Application Server 7 欢迎页面,点击<a href="http://localhost:8080/console" target="_blank" rel="external">Administration<br> Console</a> 进入JBoss7控制台，如下：<br><img src="http://img.blog.csdn.net/20131004222035593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva3lsaW5zb29uZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>5..进入JBossApplication Server 7命令行管理除了图形化管理界面外，JBoss 7还提供了命令行管理工具，具体到JBOSS_HOME/bin下执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. ./jboss-cli.sh  </p>
<p>Windows下执行</p>
<p><strong>[html]</strong> <a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="view plain" target="_blank" rel="external">view<br> plain</a><a href="http://blog.csdn.net/kylinsoong/article/details/12291173#" title="copy" target="_blank" rel="external">copy</a>1. jboss-cli.bat  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##内容概要&lt;br&gt;本部分包括本系列所需要的相关软件的安装，及资料的下载，内容列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache httpd 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maven 安装&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Junit测试出现异常：Exception in thread &quot;main&quot; java.lang.NoSuchMethodError org.junit.runner.Description.cre</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Junit%E6%B5%8B%E8%AF%95%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9AException%20in%20thread%20main%20java.lang.NoSuchMethodError%20org.junit.runner.Description.cre/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Junit测试出现异常：Exception in thread main java.lang.NoSuchMethodError org.junit.runner.Description.cre/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看错误：</p>
<pre><code class="java">Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: org.junit.runner.Description.createSuiteDescription(Ljava/lang/String;[Ljava/lang/annotation/Annotation;)Lorg/junit/runner/Description;
    at com.intellij.junit4.JUnit4TestListener.testStarted(JUnit4TestListener.java:96)
    at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:83)
    at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:37)
    at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:80)
    at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:39)
    at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:75)
    at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:36)
    at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)
    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
    at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:130)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
</code></pre>
<p>经过资料查询，发现是junit版本的问题，改成4.11即恢复正常，现在是4.2版本。运行结果：<br><img src="http://img.blog.csdn.net/20151118112634813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20151118112816775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来看看错误：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.NoSuchMethodError: org.junit.runner.Description.create
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux date命令</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Linux%20date%E5%91%BD%E4%BB%A4/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Linux date命令/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>date命令的帮助信息<br> [root@localhost source]# date –help<br>用法：date [选项]… [+格式]<br>　或：date [-u|–utc|–universal] [MMDDhhmm[[CC]YY][.ss]]<br>以给定的格式显示当前时间，或是设置系统日期。</p>
<p>  -d,–date=字符串              显示指定字符串所描述的时间，而非当前时间<br>  -f,–file=日期文件            类似–date，从日期文件中按行读入时间描述<br>  -r, –reference=文件          显示文件指定文件的最后修改时间<br>  -R, –rfc-2822                以RFC 2822格式输出日期和时间<br>                                例如：2006年8月7日，星期一 12:34:56 -0600<br>      –rfc-3339=TIMESPEC       以RFC 3339 格式输出日期和时间。<br>                                TIMESPEC=<code>date&#39;，</code>seconds’，或 `ns’<br>                                表示日期和时间的显示精度。<br>                                日期和时间单元由单个的空格分开：<br>                                2006-08-07 12:34:56-06:00<br>  -s, –set=字符串              设置指定字符串来分开时间<br>  -u, –utc, –universal        输出或者设置协调的通用时间<br>      –help            显示此帮助信息并退出<br>      –version         显示版本信息并退出</p>
<p>给定的格式FORMAT 控制着输出，解释序列如下：</p>
<p>  %%    一个文字的 %<br>  %a    当前locale 的星期名缩写(例如： 日，代表星期日)<br>  %A    当前locale 的星期名全称 (如：星期日)<br>  %b    当前locale 的月名缩写 (如：一，代表一月)<br>  %B    当前locale 的月名全称 (如：一月)<br>  %c    当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)<br>  %C    世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)<br>  %d    按月计的日期(例如：01)<br>  %D    按月计的日期；等于%m/%d/%y<br>  %e    按月计的日期，添加空格，等于%_d<br>  %F    完整日期格式，等价于 %Y-%m-%d<br>  %g    ISO-8601 格式年份的最后两位 (参见%G)<br>  %G    ISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用<br>  %h    等于%b<br>  %H    小时(00-23)<br>  %I    小时(00-12)<br>  %c    按年计的日期(001-366)<br>  %k    时(0-23)<br>  %l    时(1-12)<br>  %m    月份(01-12)<br>  %M    分(00-59)<br>  %n    换行<br>  %N    纳秒(000000000-999999999)<br>  %p    当前locale 下的”上午”或者”下午”，未知时输出为空<br>  %P    与%p 类似，但是输出小写字母<br>  %r    当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)<br>  %R    24 小时时间的时和分，等价于 %H:%M<br>  %s    自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数<br>  %S    秒(00-60)<br>  %t    输出制表符 Tab<br>  %T    时间，等于%H:%M:%S<br>  %u    星期，1 代表星期一<br>  %U    一年中的第几周，以周日为每星期第一天(00-53)<br>  %V    ISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)<br>  %w    一星期中的第几日(0-6)，0 代表周一<br>  %W    一年中的第几周，以周一为每星期第一天(00-53)<br>  %x    当前locale 下的日期描述 (如：12/31/99)<br>  %X    当前locale 下的时间描述 (如：23:13:48)<br>  %y    年份最后两位数位 (00-99)<br>  %Y    年份<br>  %z +hhmm              数字时区(例如，-0400)<br>  %:z +hh:mm            数字时区(例如，-04:00)<br>  %::z +hh:mm:ss        数字时区(例如，-04:00:00)<br>  %:::z                 数字时区带有必要的精度 (例如，-04，+05:30)<br>  %Z                    按字母表排序的时区缩写 (例如，EDT)</p>
<p>默认情况下，日期的数字区域以0 填充。<br>以下可选标记可以跟在”%”后:</p>
<ul>
<li>(连字符)不填充该域<br>_ (下划线)以空格填充<br>0 (数字0)以0 填充<br>^ 如果可能，使用大写字母<h1 id="如果可能，使用相反的大小写"><a href="#如果可能，使用相反的大小写" class="headerlink" title="如果可能，使用相反的大小写"></a>如果可能，使用相反的大小写</h1></li>
</ul>
<p>在任何标记之后还允许一个可选的域宽度指定，它是一个十进制数字。<br>作为一个可选的修饰声明，它可以是E，在可能的情况下使用本地环境关联的<br>表示方式；或者是O，在可能的情况下使用本地环境关联的数字符号。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;date命令的帮助信息&lt;br&gt; [root@localhost source]# date –help&lt;br&gt;用法：date [选项]… [+格式]&lt;br&gt;　或：date [-u|–utc|–universal] [MMDDhhmm[[CC]YY][.ss]]&lt;br&gt;以给定
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux根据内容查找所在文件名</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Linux%E6%A0%B9%E6%8D%AE%E5%86%85%E5%AE%B9%E6%9F%A5%E6%89%BE%E6%89%80%E5%9C%A8%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Linux根据内容查找所在文件名/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到要查找一个表名在哪个python文件中，网上搜了下命令，运行没问题，所以拿出来跟大家分享下：</p>
<p>案例：查找表名为 rs_all_user_pv_category 的内容在哪个python文件中</p>
<pre><code class="python">find . -name &quot;*.py&quot; | xargs grep &quot;rs_all_user_pv_category&quot;
</code></pre>
<p>命令含义： 在当前目录下查找  rs_all_user_pv_category  在哪个以.py结尾的文件中输出结果：<br>./rs_all_user_pv_category.py:print ‘&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; BEGIN rs_all_user_pv_category.py’<br>./rs_all_user_pv_category.py:# python rs_all_user_pv_category.py $(date +%Y-%m-%d -d ‘-1 day’)</p>
<p>有待研究的：过滤掉重复的文件名，并只显示文件名称，，，，，，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到要查找一个表名在哪个python文件中，网上搜了下命令，运行没问题，所以拿出来跟大家分享下：&lt;/p&gt;
&lt;p&gt;案例：查找表名为 rs_all_user_pv_category 的内容在哪个python文件中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux环境下查看jar包的归档目录</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%9F%A5%E7%9C%8Bjar%E5%8C%85%E7%9A%84%E5%BD%92%E6%A1%A3%E7%9B%AE%E5%BD%95/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Linux环境下查看jar包的归档目录/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux环境下使用java自带的jar命令进行归档，及归档目录的查看。<br>首先使用 jar –help 查看帮助文档：</p>
<pre><code class="javascript">jerry@debian0:~/testdata$ jar --help
非法选项: -
用法: jar {ctxui}[vfm0Me] [jar-file] [manifest-file] [entry-point] [-C dir] files ...
选项包括: 
    -c  创建新的归档文件
    -t  列出归档目录
    -x  从档案中提取指定的 (或所有) 文件
    -u  更新现有的归档文件
    -v  在标准输出中生成详细输出
    -f  指定归档文件名
    -m  包含指定清单文件中的清单信息
    -e  为捆绑到可执行 jar 文件的独立应用程序
        指定应用程序入口点
    -0  仅存储; 不使用情况任何 ZIP 压缩
    -M  不创建条目的清单文件
    -i  为指定的 jar 文件生成索引信息
    -C  更改为指定的目录并包含其中的文件
如果有任何目录文件, 则对其进行递归处理。
清单文件名, 归档文件名和入口点名称的指定顺序
与 &#39;m&#39;, &#39;f&#39; 和 &#39;e&#39; 标记的指定顺序相同。

示例 1: 将两个类文件归档到一个名为 classes.jar 的归档文件中: 
       jar cvf classes.jar Foo.class Bar.class 
示例 2: 使用现有的清单文件 &#39;mymanifest&#39; 并
           将 foo/ 目录中的所有文件归档到 &#39;classes.jar&#39; 中: 
       jar cvfm classes.jar mymanifest -C foo/ .
</code></pre>
<p>上个例子：查看归档的jar包中是否包含我们想要的class文件：</p>
<pre><code class="javascript">jerry@debian0:~/testdata$ jar vtf /home/jerry/data/data1/workspace/intellij/spark_test_project/target/spark_test_project-1.0-SNAPSHOT.jar | grep com.spark.test.udf
     0 Sun Jul 10 17:58:56 CST 2016 com/spark/test/udf/
   741 Sun Jul 10 17:58:56 CST 2016 com/spark/test/udf/HelloUDF.class
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux环境下使用java自带的jar命令进行归档，及归档目录的查看。&lt;br&gt;首先使用 jar –help 查看帮助文档：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;jerry@debian0:~/testdata$ jar --help
非法选
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lucene4.4与IKAnalyzer冲突</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Lucene4.4%E4%B8%8EIKAnalyzer%E5%86%B2%E7%AA%81/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Lucene4.4与IKAnalyzer冲突/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看异常：</p>
<pre><code class="java">&quot;D:\Program Files\Java\jdk1.7.0_67\bin\java&quot; -ea -Didea.launcher.port=7537 &quot;-Didea.launcher.bin.path=D:\Program Files\JetBrains\IntelliJ IDEA Community Edition 14.1.2\bin&quot; -Dfile.encoding=GBK -classpath &quot;D:\Program Files\JetBrains\IntelliJ IDEA Community Edition 14.1.2\lib\idea_rt.jar;D:\Program Files\JetBrains\IntelliJ IDEA Community Edition 14.1.2\plugins\junit\lib\junit-rt.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\charsets.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\deploy.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\javaws.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\jce.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\jfr.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\jfxrt.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\jsse.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\management-agent.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\plugin.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\resources.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\rt.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\access-bridge-64.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\dnsns.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\jaccess.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\localedata.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\sunec.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\sunjce_provider.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\sunmscapi.jar;D:\Program Files\Java\jdk1.7.0_67\jre\lib\ext\zipfs.jar;D:\workspace\Intellij\lucenetest\target\test-classes;D:\workspace\Intellij\lucenetest\target\classes;C:\Users\Administrator\.m2\repository\org\apache\lucene\lucene-core\4.2.1\lucene-core-4.2.1.jar;C:\Users\Administrator\.m2\repository\org\apache\lucene\lucene-analyzers-common\4.2.1\lucene-analyzers-common-4.2.1.jar;C:\Users\Administrator\.m2\repository\org\apache\lucene\lucene-queryparser\4.2.1\lucene-queryparser-4.2.1.jar;C:\Users\Administrator\.m2\repository\org\apache\lucene\lucene-queries\4.2.1\lucene-queries-4.2.1.jar;C:\Users\Administrator\.m2\repository\org\apache\lucene\lucene-sandbox\4.2.1\lucene-sandbox-4.2.1.jar;C:\Users\Administrator\.m2\repository\jakarta-regexp\jakarta-regexp\1.4\jakarta-regexp-1.4.jar;C:\Users\Administrator\.m2\repository\org\wltea\analyzer\IKAnalyzer\12.06\IKAnalyzer-12.06.jar;C:\Users\Administrator\.m2\repository\junit\junit\4.2\junit-4.2.jar&quot; com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 com.my.test.analyzer.AnalyzerTest,AnalyzerTest
Exception in thread &quot;main&quot; java.lang.VerifyError: class org.wltea.analyzer.lucene.IKAnalyzer overrides final method tokenStream.(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClass(ClassLoader.java:800)
    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
    at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)
    at java.net.URLClassLoader.access$100(URLClassLoader.java:71)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
    at java.lang.Class.getDeclaredMethods0(Native Method)
    at java.lang.Class.privateGetDeclaredMethods(Class.java:2570)
    at java.lang.Class.getMethod0(Class.java:2813)
    at java.lang.Class.getMethod(Class.java:1663)
    at com.intellij.junit4.JUnit4TestRunnerUtil.buildRequest(JUnit4TestRunnerUtil.java:133)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:39)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
</code></pre>
<p>谷歌查询以后发现是分词器与Lucene的冲突引起的。<br>然后使用了 IKAnalyzer2012FF_u1.jar 后问题得到解决。<br>下载地址：<a href="http://download.csdn.net/detail/liuhui_306/9238039" target="_blank" rel="external">http://download.csdn.net/detail/liuhui_306/9238039</a>   <a href="http://download.csdn.net/detail/liuhui_306/9238039" target="_blank" rel="external">点击打开链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来看异常：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&amp;quot;D:\Program Files\Java\jdk1.7.0_67\bin\java&amp;quot; -ea -Didea.launcher.port=7537 &amp;quot;-Didea.laun
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven安装远程仓库没有的依赖库</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Maven%E5%AE%89%E8%A3%85%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%B2%A1%E6%9C%89%E7%9A%84%E4%BE%9D%E8%B5%96%E5%BA%93/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Maven安装远程仓库没有的依赖库/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候maven远程仓库不存在我们要的依赖库，那么就需要自己将需要的jar安装到本地仓库，maven安装依赖到本地有两种方式：<br>1、手动方式安装已经存在的jar：</p>
<p>安装命令：<br>          mvn install:install-file -Dfile=<strong>{</strong>Path<strong>/</strong>to<strong>/</strong>your<strong>/</strong>ojdbc.jar<strong>}</strong>-DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar<br>    例子：安装IKAnalyzer.jar<br>    目录：<br>    <img src="http://img.blog.csdn.net/20151103173323250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>    安装命令：mvn install:install-file -Dfile=D:\Users\Administrator\Desktop\IKAnalyzer2012_u6 -DgroupId=org.wltea.analyzer -DartifactId=IKAnalyzer -Dversion=12.06 -Dpackaging=jar<br>    打开cmd命令终端，输入执行结果：<br>    <img src="http://img.blog.csdn.net/20151103173344478" alt=""><br>    本地仓库：<br>    <img src="http://img.blog.csdn.net/20151103173503995" alt=""><br>    在使用的项目中添加maven依赖：<br>    <img src="http://img.blog.csdn.net/20151103173709557" alt=""><br>    此时还不行，还需要将刚才的jar重命名成 IKAnalyzer-12.06.jar ，让后放到maven本地仓库目录下：<br>    <img src="http://img.blog.csdn.net/20151103173847723" alt=""><br>    ok了<br>2、安装maven项目：<br>执行命令：mvn install -Dmaven.test.skip=true<br>执行结果：<br><img src="http://img.blog.csdn.net/20151104172610416?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>网速有点慢执行，的时间稍微有点长。<br>然后在项目中添加依赖即可。<br><img src="http://img.blog.csdn.net/20151104172803354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候maven远程仓库不存在我们要的依赖库，那么就需要自己将需要的jar安装到本地仓库，maven安装依赖到本地有两种方式：&lt;br&gt;1、手动方式安装已经存在的jar：&lt;/p&gt;
&lt;p&gt;安装命令：&lt;br&gt;          mvn install:install-file -
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL的字符串函数截取字符</title>
    <link href="http://itsky88.com/2016/12/18/csdn/MySQL%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6/"/>
    <id>http://itsky88.com/2016/12/18/csdn/MySQL的字符串函数截取字符/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数：<br><strong>1、从左开始截取字符串</strong><br>left（str, length）<br>说明：left（被截取字段，截取长度）<br>例：select left（content,200） as abstract from my_content_t<br><strong>2、从右开始截取字符串</strong><br>right（str, length）<br>说明：right（被截取字段，截取长度）<br>例：select right（content,200） as abstract from my_content_t<br><strong>3、截取字符串 
</strong>substring（str, pos）<br>substring（str, pos, length）<br>说明：substring（被截取字段，从第几位开始截取）<br>substring（被截取字段，从第几位开始截取，截取长度）<br>例：select substring（content,5） as abstract from my_content_t<br>select substring（content,5,200） as abstract from my_content_t<br>（注：如果位数是负数 如-5 则是从后倒数位数，到字符串结束或截取的长度）<br><strong>4、按关键字截取字符串</strong><br>substring_index（str,delim,count）<br>说明：substring_index（被截取字段，关键字，关键字出现的次数）<br>例：select substring_index（”blog.jb51.net”，”。”，2） as abstract from my_content_t<br>结果：blog.jb51<br>（注：如果关键字出现的次数是负数 如-2 则是从后倒数，到字符串结束）<br>函数简介：<br>SUBSTRING(<em>str</em>,<em>pos</em>) , SUBSTRING(<em>str</em> FROM <em>pos</em>) SUBSTRING(<em>str</em>,<em>pos</em>,<em>len</em>)<br> , SUBSTRING(<em>str</em> FROM <em>pos</em> FOR <em>len</em>)<br>不带有<em>len</em> 参数的格式从字符串<em>str</em>返回一个子字符串，起始于位置 <em>pos</em>。带有<em>len</em>参数的格式从字符串<em>str</em>返回一个长度同<em>len</em>字符相同的子字符串，起始于位置 <em>pos</em>。<br> 使用 FROM的格式为标准 SQL 语法。也可能对<em>pos</em>使用一个负值。假若这样，则子字符串的位置起始于字符串结尾的<em>pos</em> 字符，而不是字符串的开头位置。在以下格式的函数中可以对<em>pos</em> 使用一个负值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数：&lt;br&gt;&lt;strong&gt;1、从左开始截取字符串&lt;/strong&gt;&lt;br&gt;left（str, length）&lt;br&gt;说明：left（被截取字段，截取长度）&lt;br&gt;例：select left（content,200） as abstract from my_content
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Number of dynamic partitions exceeded hive.exec.max.dynamic.partitions.pernode</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Number%20of%20dynamic%20partitions%20exceeded%20hive.exec.max.dynamic.partitions.pernode/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Number of dynamic partitions exceeded hive.exec.max.dynamic.partitions.pernode/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>动态分区数太大的问题：[Fatal Error] Operator FS_2 (id=2): Number of dynamic partitions exceeded hive.exec.max.dynamic.partitions.pernode.</p>
<p>hive&gt; insert into table sogouq_test partition(query_time) select user_id,query_word,query_order,click_order,url,query_time from sogouq_test_tmp;<br>Total MapReduce jobs = 3<br>Launching Job 1 out of 3<br>Number of reduce tasks is set to 0 since there’s no reduce operator<br>Starting Job = job_1409113942738_0026, Tracking URL = <a href="http://centos1:8088/proxy/application_1409113942738_0026/" target="_blank" rel="external">http://centos1:8088/proxy/application_1409113942738_0026/</a><br>Kill Command = /home/hadoop-2.2/bin/hadoop job  -kill job_1409113942738_0026<br>Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 0<br>2014-08-27 03:55:16,868 Stage-1 map = 0%,  reduce = 0%<br>[Fatal Error] Operator FS_2 (id=2): Number of dynamic partitions exceeded hive.exec.max.dynamic.partitions.pernode.<br>Sample of 100 partitions created under hdfs://centos1:8020/hive/scratchdir/hive_2014-08-27_03-55-09_118_348369539322185503-1/_tmp.-ext-10002:<br>        …/query_time=20111230000005<br>        …/query_time=20111230000007<br>        …/query_time=20111230000008<br>        …/query_time=20111230000009<br>        …/query_time=20111230000010<br>        …/query_time=20111230000011</p>
<p>查看最大分区数：<br>hive&gt; set hive.exec.max.dynamic.partitions.pernode;<br>hive.exec.max.dynamic.partitions.pernode=100<br>将该参数设置的大一点，问题即解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态分区数太大的问题：[Fatal Error] Operator FS_2 (id=2): Number of dynamic partitions exceeded hive.exec.max.dynamic.partitions.pernode.&lt;/p&gt;
&lt;p&gt;hiv
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oracle TIMESTAMP的处理</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Oracle%20TIMESTAMP%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Oracle TIMESTAMP的处理/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>public class Test {<br>private static final SimpleDateFormat FORMAT = new SimpleDateFormat(“yyyy-MM-dd HH:mm:dd”);</p>
<p>public static void main(String[] args) throws SQLException {<br>oracle.sql.TIMESTAMP temp = new oracle.sql.TIMESTAMP();</p>
<p>System.out.println(convertOrclTimestemp2String(temp, null));<br>}</p>
<p>public static String convertOrclTimestemp2String(oracle.sql.TIMESTAMP temp, String pattern) throws SQLException {<br>java.sql.Timestamp tt = (java.sql.Timestamp) temp.toJdbc();<br>if(StringUtils.isNotBlank(pattern)) {<br>FORMAT.applyPattern(pattern);<br>}<br>return FORMAT.format(new Date(tt.getTime()));<br>}<br>}</p>
<p>输出结果：1970-01-01 00:00:01</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;public class Test {&lt;br&gt;private static final SimpleDateFormat FORMAT = new SimpleDateFormat(“yyyy-MM-dd HH:mm:dd”);&lt;/p&gt;
&lt;p&gt;public static v
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PyCharm 3的PEP8代码风格警告提示信息</title>
    <link href="http://itsky88.com/2016/12/18/csdn/PyCharm%203%E7%9A%84PEP8%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E8%AD%A6%E5%91%8A%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF/"/>
    <id>http://itsky88.com/2016/12/18/csdn/PyCharm 3的PEP8代码风格警告提示信息/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyCharm好心的PEP8提示却有碍代码观感，怎样才能关闭我不需要的警告信息呢？<br><img src="http://img.blog.csdn.net/20151116110517097" alt=""></p>
<p>通过Google发现了如下信息：<br><em>In<br> pycharm, click the settings icon, or go to the settings via the menu bar.</em><br><em>In the project settings section, click ‘inspections’</em><br><em>In the list that appears, click ‘python’.</em><br><em>Under python, scroll down and click PEP8.</em><br><em>Now, underneath the description, you’ll se an ‘ignore errors’ section. Click the + at the bottom.</em><br><em>Now, go </em><a href="http://pep8.readthedocs.org/en/latest/intro.html#configuration" target="_blank" rel="external">here</a><em>.<br> This is a page of the pep8.py documentation, listing all possible errors and warnings.</em><br><em>Find an error you want to ignore, and copy the error code at the left.</em><br><em>Paste this error code into the field you just added in the settings window.</em><br><em>Add all the errors you want to ignore and click apply.</em></p>
<p><em>主要是在PyCharm项目设置中找到<code>inspections</code>选项，然后找到<code>PEP
 8 coding style violation</code>，在右边的ignore errors，点击下面的加号，添加要忽略的警告信息编码，这个编码可以参考<a href="http://pep8.readthedocs.org/en/latest/intro.html#configuration" target="_blank" rel="external">PEP8.py的官方网站</a>，如下图所示我添加了E221、E401、E203这几个要忽略的信息。
</em><br><em>只要取消掉PEP8风格警告和校验警告即可：</em><br><em><img src="http://img.blog.csdn.net/20151116110733254" alt="">
</em><br><em>后来JetBrains的开发者Dmitry<br> Jemerov与作者联系提供了一个更为简便的办法，那就是点击要忽略的错误所在，然后按Alt+Enter，在弹出下拉菜单选择<code>ignore
 errors like this</code>，就可以快速忽略了。
</em><br><em>
</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyCharm好心的PEP8提示却有碍代码观感，怎样才能关闭我不需要的警告信息呢？&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151116110517097&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过Google发现了如下信息：&lt;br&gt;&lt;em
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python处理JSON</title>
    <link href="http://itsky88.com/2016/12/18/csdn/Python%E5%A4%84%E7%90%86JSON/"/>
    <id>http://itsky88.com/2016/12/18/csdn/Python处理JSON/</id>
    <published>2016-12-18T09:34:18.000Z</published>
    <updated>2016-12-18T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>概念<br>序列化（Serialization）：将对象的状态信息转换为可以存储或可以通过网络传输的过程，传输的格式可以是JSON、XML等。反序列化就是从存储区域（JSON，XML）读取反序列化对象的状态，重新创建该对象。<br>JSON（JavaScript Object Notation）：一种轻量级数据交换格式，相对于XML而言更简单，也易于阅读和编写，机器也方便解析和生成，Json是JavaScript中的一个子集。<br>Python2.6开始加入了JSON模块，无需另外下载，Python的Json模块序列化与反序列化的过程分别是 encoding和 decoding<br>encoding：把一个Python对象编码转换成Json字符串<br>decoding：把Json格式字符串解码转换成Python对象<br>对于简单数据类型（string、unicode、int、float、list、tuple、dict），可以直接处理。</p>
<p>#####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#jsondumpsencoding" target="_blank" rel="external"></a>json.dumps方法对简单数据类型encoding：<br>    import json<br>    data = [{‘a’:”A”,’b’:(2,4),’c’:3.0}]  #list对象<br>    print “DATA:”,repr(data)</p>
<pre><code>data_string = json.dumps(data)
print &quot;JSON:&quot;,data_string
</code></pre><p>输出：<br>    DATA: [{‘a’:’A’,’c’:3.0,’b’:(2,4)}] #python的dict类型的数据是没有顺序存储的<br>    JSON: [{“a”:”A”,”c”:3.0,”b”:[2,4]}]  </p>
<p>JSON的输出结果与DATA很相似，除了一些微妙的变化，如python的元组类型变成了Json的数组，Python到Json的编码转换规则是： <a href="https://github.com/lzjun567/note/blob/master/resource/image/python2json.png" target="_blank" rel="external"><img src="https://github.com/lzjun567/note/raw/master/resource/image/python2json.png" alt="python2json"></a></p>
<p>#####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#jsonloadsdecoding" target="_blank" rel="external"></a>json.loads方法处理简单数据类型的decoding（解码）转换<br>    import json<br>    data = [{‘a’:”A”,’b’:(2,4),’c’:3.0}]  #list对象</p>
<pre><code>data_string = json.dumps(data)
print &quot;ENCODED:&quot;,data_string

decoded = json.loads(data_string)
print &quot;DECODED:&quot;,decoded

print &quot;ORIGINAL:&quot;,type(data[0][&#39;b&#39;])
print &quot;DECODED:&quot;,type(decoded[0][&#39;b&#39;])
</code></pre><p>输出:<br>    ENCODED: [{“a”: “A”, “c”: 3.0, “b”: [2, 4]}]<br>    DECODED: [{u’a’: u’A’, u’c’: 3.0, u’b’: [2, 4]}]<br>    ORIGINAL: <type 'tuple'=""><br>    DECODED: <type 'list'=""></type></type></p>
<p>解码过程中，json的数组最终转换成了python的list，而不是最初的tuple类型，Json到Python的解码规则是： <a href="https://github.com/lzjun567/note/blob/master/resource/image/json2python.png" target="_blank" rel="external"><img src="https://github.com/lzjun567/note/raw/master/resource/image/json2python.png" alt="json2python"></a></p>
<p>####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#json" target="_blank" rel="external"></a>json的人文关怀<br>编码后的json格式字符串紧凑的输出，而且也没有顺序，因此<code>dumps</code>方法提供了一些可选的参数，让输出的格式提高可读性，如<code>sort_keys</code>是告诉编码器按照字典排序(a到z)输出。<br>    import json</p>
<pre><code>data = [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0 } ]
print &#39;DATA:&#39;, repr(data)

unsorted = json.dumps(data)
print &#39;JSON:&#39;, json.dumps(data)
print &#39;SORT:&#39;, json.dumps(data, sort_keys=True)
</code></pre><p>输出:<br>    DATA: [{‘a’: ‘A’, ‘c’: 3.0, ‘b’: (2, 4)}]<br>    JSON: [{“a”: “A”, “c”: 3.0, “b”: [2, 4]}]<br>    SORT: [{“a”: “A”, “b”: [2, 4], “c”: 3.0}</p>
<p><code>indent</code>参数根据数据格式缩进显示，读起来更加清晰:<br>    import json</p>
<pre><code>data = [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0 } ]
print &#39;DATA:&#39;, repr(data)

print &#39;NORMAL:&#39;, json.dumps(data, sort_keys=True)
print &#39;INDENT:&#39;, json.dumps(data, sort_keys=True, indent=2)
</code></pre><p>输出:<br>    DATA: [{‘a’: ‘A’, ‘c’: 3.0, ‘b’: (2, 4)}]<br>    NORMAL: [{“a”: “A”, “b”: [2, 4], “c”: 3.0}]<br>    INDENT: [<br>      {<br>        “a”: “A”,<br>        “b”: [<br>          2,<br>          4<br>        ],<br>        “c”: 3.0<br>      }<br>    ]</p>
<p><code>separators</code>参数的作用是去掉<code>,</code>,<code>:</code>后面的空格，从上面的输出结果都能看到”,<br> :”后面都有个空格，这都是为了美化输出结果的作用，但是在我们传输数据的过程中，越精简越好，冗余的东西全部去掉，因此就可以加上separators参数：<br>    import json</p>
<pre><code>data = [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0 } ]
print &#39;DATA:&#39;, repr(data)
print &#39;repr(data)             :&#39;, len(repr(data))
print &#39;dumps(data)            :&#39;, len(json.dumps(data))
print &#39;dumps(data, indent=2)  :&#39;, len(json.dumps(data, indent=2))
print &#39;dumps(data, separators):&#39;, len(json.dumps(data, separators=(&#39;,&#39;,&#39;:&#39;)))
</code></pre><p>输出：<br>    DATA: [{‘a’: ‘A’, ‘c’: 3.0, ‘b’: (2, 4)}]<br>    repr(data)             : 35<br>    dumps(data)            : 35<br>    dumps(data, indent=2)  : 76<br>    dumps(data, separators): 29</p>
<p><code>skipkeys</code>参数，在encoding过程中，dict对象的key只可以是string对象，如果是其他类型，那么在编码过程中就会抛出<code>ValueError</code>的异常。<code>skipkeys</code>可以跳过那些非string对象当作key的处理.<br>    import json</p>
<pre><code>data= [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0, (&#39;d&#39;,):&#39;D tuple&#39; } ]

try:
    print json.dumps(data)
except (TypeError, ValueError) as err:
    print &#39;ERROR:&#39;, err
print 
print json.dumps(data, skipkeys=True)
</code></pre><p>输出:<br>    ERROR: keys must be a string</p>
<pre><code>[{&quot;a&quot;: &quot;A&quot;, &quot;c&quot;: 3.0, &quot;b&quot;: [2, 4]}]
</code></pre><p>####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#json-1" target="_blank" rel="external"></a>让json支持自定义数据类型<br>以上例子都是基于python的built-in类型的，对于自定义类型的数据结构，json模块默认是没法处理的，会抛出异常：<code>TypeError
 xx is not JSON serializable</code>，此时你需要自定义一个转换函数:<br>    import json  </p>
<pre><code>class MyObj(object):
    def __init__(self, s):
        self.s = s
    def __repr__(self):
        return &#39;&lt;MyObj(%s)&gt;&#39; % self.s

obj = .MyObj(&#39;helloworld&#39;)

try:
    print json.dumps(obj)
except TypeError, err:
    print &#39;ERROR:&#39;, err

#转换函数
def convert_to_builtin_type(obj):
    print &#39;default(&#39;, repr(obj), &#39;)&#39;
    # 把MyObj对象转换成dict类型的对象
    d = { &#39;__class__&#39;:obj.__class__.__name__, 
          &#39;__module__&#39;:obj.__module__,
        }
    d.update(obj.__dict__)
    return d

print json.dumps(obj, default=convert_to_builtin_type)
</code></pre><p>输出:<br>    ERROR: <myobj(helloworld)> is not JSON serializable<br>    default( <myobj(helloworld)> )<br>    {“s”: “hellworld”, “<strong>module</strong>“: “MyObj”, “<strong>class</strong>“: “<strong>main</strong>“} </myobj(helloworld)></myobj(helloworld)></p>
<pre><code>#注意：这里的class和module根据你代码的所在文件位置不同而不同
</code></pre><p>相反，如果要把json decode 成python对象，同样也需要自定转换函数，传递给json.loads方法的<code>object_hook</code>参数：</p>
<pre><code>#jsontest.py

import json

class MyObj(object):

    def __init__(self,s):
        self.s = s

    def __repr__(self):

        return &quot;&lt;MyObj(%s)&gt;&quot; % self.s

def dict_to_object(d):
    if &#39;__class__&#39; in d:
        class_name = d.pop(&#39;__class__&#39;)
        module_name = d.pop(&#39;__module__&#39;)
        module = __import__(module_name)

        print &quot;MODULE:&quot;,module

        class_ = getattr(module,class_name)

        print &quot;CLASS&quot;,class_

        args = dict((key.encode(&#39;ascii&#39;),value) for key,value in d.items())

        print &#39;INSTANCE ARGS:&#39;,args

        inst = class_(**args)
    else:
        inst = d
    return inst

encoded_object = &#39;[{&quot;s&quot;:&quot;helloworld&quot;,&quot;__module__&quot;:&quot;jsontest&quot;,&quot;__class__&quot;:&quot;MyObj&quot;}]&#39;

myobj_instance = json.loads(encoded_object,object_hook=dict_to_object)
print myobj_instance
</code></pre><p>输出：<br>    MODULE: <module 'jsontest'="" from="" 'e:\users\liuzhijun\workspace\python\jsontest.py'=""><br>    CLASS <class 'jsontest.myobj'=""><br>    INSTANCE ARGS: {‘s’: u’helloworld’}<br>    [<myobj(helloworld)>]<br>    MODULE: <module 'jsontest'="" from="" 'e:\users\liuzhijun\workspace\python\jsontest.py'=""><br>    CLASS <class 'jsontest.myobj'=""><br>    INSTANCE ARGS: {‘s’: u’helloworld’}<br>    [<myobj(helloworld)>]</myobj(helloworld)></class></module></myobj(helloworld)></class></module></p>
<p>####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#encoderdecoderjson" target="_blank" rel="external"></a>使用Encoder与Decoder类实现json编码的转换<br>JSONEncoder有一个迭代接口<code>iterencode(data)</code>，返回一系列编码的数据，他的好处是可以方便的把逐个数据写到文件或网络流中，而不需要一次性就把数据读入内存.<br>    import json</p>
<pre><code>encoder = json.JSONEncoder()
data = [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0 } ]

for part in encoder.iterencode(data):
    print &#39;PART:&#39;, part
</code></pre><p>输出：<br>    PART: [<br>    PART: {<br>    PART: “a”<br>    PART: :<br>    PART: “A”<br>    PART: ,<br>    PART: “c”<br>    PART: :<br>    PART: 3.0<br>    PART: ,<br>    PART: “b”<br>    PART: :<br>    PART: [2<br>    PART: , 4<br>    PART: ]<br>    PART: }<br>    PART: ]</p>
<p><code>encode</code>方法等价于<code>&#39;&#39;.join(encoder.iterencode()</code>，而且预先会做些错误检查（比如非字符串作为dict的key），对于自定义的对象，我们只需从些JSONEncoder的<code>default()</code>方法，其实现方式与上面提及的函数<code>convet_to_builtin_type()</code>是类似的。<br>    import json<br>    import json_myobj</p>
<pre><code>class MyObj(object):

    def __init__(self,s):
        self.s = s

    def __repr__(self):
        return &quot;&lt;MyObj(%s)&gt;&quot; % self.s

class MyEncoder(json.JSONEncoder):

    def default(self, obj):
        print &#39;default(&#39;, repr(obj), &#39;)&#39;
        # Convert objects to a dictionary of their representation
        d = { &#39;__class__&#39;:obj.__class__.__name__, 
              &#39;__module__&#39;:obj.__module__,
              }
        d.update(obj.__dict__)
        return d

obj = json_myobj.MyObj(&#39;helloworld&#39;)
print obj
print MyEncoder().encode(obj)
</code></pre><p>输出：<br>    <myobj(internal data)=""><br>    default( <myobj(internal data)=""> )<br>    {“s”: “helloworld”, “<strong>module</strong>“: “Myobj”, “<strong>class</strong>“: “MyObj”}</myobj(internal></myobj(internal></p>
<p>从json对Python对象的转换:<br>    class MyDecoder(json.JSONDecoder):</p>
<pre><code>    def __init__(self):
        json.JSONDecoder.__init__(self, object_hook=self.dict_to_object)

    def dict_to_object(self, d):
        if &#39;__class__&#39; in d:
            class_name = d.pop(&#39;__class__&#39;)
            module_name = d.pop(&#39;__module__&#39;)
            module = __import__(module_name)
            print &#39;MODULE:&#39;, module
            class_ = getattr(module, class_name)
            print &#39;CLASS:&#39;, class_
            args = dict( (key.encode(&#39;ascii&#39;), value) for key, value in d.items())
            print &#39;INSTANCE ARGS:&#39;, args
            inst = class_(**args)
        else:
            inst = d
        return inst

encoded_object = &#39;[{&quot;s&quot;: &quot;helloworld&quot;, &quot;__module__&quot;: &quot;jsontest&quot;, &quot;__class__&quot;: &quot;MyObj&quot;}]&#39;

myobj_instance = MyDecoder().decode(encoded_object)
print myobj_instance
</code></pre><p>输出:<br>    MODULE: <module 'jsontest'="" from="" 'e:\users\liuzhijun\workspace\python\jsontest.py'=""><br>    CLASS: <class 'jsontest.myobj'=""><br>    INSTANCE ARGS: {‘s’: u’helloworld’}<br>    [<myobj(helloworld)>]</myobj(helloworld)></class></module></p>
<p>####<a href="https://github.com/lzjun567/note/blob/master/python/json.md#json-2" target="_blank" rel="external"></a>json格式字符串写入到文件流中<br>上面的例子都是在内存中操作的，如果对于大数据，把他编码到一个类文件(file-like)中更合适，<code>load()</code>和<code>dump()</code>方法就可以实现这样的功能。<br>    import json<br>    import tempfile</p>
<pre><code>data = [ { &#39;a&#39;:&#39;A&#39;, &#39;b&#39;:(2, 4), &#39;c&#39;:3.0 } ]

f = tempfile.NamedTemporaryFile(mode=&#39;w+&#39;)
json.dump(data, f)
f.flush()

print open(f.name, &#39;r&#39;).read()
</code></pre><p>输出：<br>    [{“a”: “A”, “c”: 3.0, “b”: [2, 4]}]</p>
<p>类似的：<br>    import json<br>    import tempfile</p>
<pre><code>f = tempfile.NamedTemporaryFile(mode=&#39;w+&#39;)
f.write(&#39;[{&quot;a&quot;: &quot;A&quot;, &quot;c&quot;: 3.0, &quot;b&quot;: [2, 4]}]&#39;)
f.flush()
f.seek(0)

print json.load(f)
</code></pre><p>输出：<br>    [{u’a’: u’A’, u’c’: 3.0, u’b’: [2, 4]}]</p>
<p>参考：<br><a href="http://docs.python.org/2/library/json.html" target="_blank" rel="external">http://docs.python.org/2/library/json.html</a><br><a href="http://www.cnblogs.com/coser/archive/2011/12/14/2287739.html" target="_blank" rel="external">http://www.cnblogs.com/coser/archive/2011/12/14/2287739.html</a><br><a href="http://pymotw.com/2/json/" target="_blank" rel="external">http://pymotw.com/2/json/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概念&lt;br&gt;序列化（Serialization）：将对象的状态信息转换为可以存储或可以通过网络传输的过程，传输的格式可以是JSON、XML等。反序列化就是从存储区域（JSON，XML）读取反序列化对象的状态，重新创建该对象。&lt;br&gt;JSON（JavaScript Objec
    
    </summary>
    
    
  </entry>
  
</feed>
